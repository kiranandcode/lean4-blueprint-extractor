{
  "7161a982d0ae99963bef89f6fcff3a76c0ddd5f5": {
    "date": "2024-04-01T23:27:36",
    "graph": []
  },
  "3683cf9f515dec763029e5b38c10242a2769e6f9": {
    "date": "2024-04-06T20:46:45",
    "graph": [
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {Z}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "3 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c Z. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "68e476980b889b6f5c15f6b339643dfe70c73945": {
    "date": "2024-04-06T21:16:41",
    "graph": [
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok ... \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ... ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": false
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [
          "lmm:cube_of_castHom_ne_zero"
        ],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \\uses{lmm:cube_of_castHom_ne_zero} ... \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ... ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": false
      },
      {
        "id": "chap:case2",
        "node_deps": [
          "lmm:cube_of_not_dvd"
        ],
        "node_lean_decls": [
          "fermatLastTheoremThree_case1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3 (Case 1)",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3 (Case 1)] \\label{thm:fermatLastTheoremThree_case1} \\lean{fermatLastTheoremThree_case1} \\leanok \\uses{lmm:cube_of_not_dvd} Let $a$, $b$ and $c$ be in \\mathbb {Z}. If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "0.3 Fermat\u2019s Last Theorem for 3 (Case 1)",
        "node_text_content": "    Let a, b and c be in Z. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": false
      }
    ]
  },
  "bc85d5882794ee0f706a08875399776a95193f15": {
    "date": "2024-04-06T21:48:05",
    "graph": [
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {Z}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "3 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c Z. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "4487db7b39e7af9cba9dcebcaa7f21d83207bf5f": {
    "date": "2024-04-06T22:17:30",
    "graph": [
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nshortmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "3 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "30e346bb2165e0db0a035840a5396c605c1fd645": {
    "date": "2024-04-06T23:26:19",
    "graph": [
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "chap:acknowledgements",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nshortmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "3 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "d81e8d784b4f37e3b8c9172a515d762ca0cfcd6b": {
    "date": "2024-04-06T23:38:29",
    "graph": [
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nshortmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "3 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "d7eed8fff894dcde64cd460e5647f94fdd863077": {
    "date": "2024-04-07T17:29:21",
    "graph": [
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid b$ and $3 \\shortmid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 b and 3 c and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nshortmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "3 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid a$ and $3 \\shortmid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 a and 3 c and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid a$ and $3 \\shortmid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 a and 3 b and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $n=3$, it suffices to prove that $\\forall a, b, c \\in \\mathbb {Z}$ if $c \\neq 0$ and $3 \\nshortmid a$ and $3 \\nshortmid b$ and $3 \\shortmid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent n=3, it suffices to prove that \u2200a, b, c Z if c \u22600 and 3 a and 3 b and 3 c and (a,b)=1, then a3 + b3 \u2260c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "89a9972406e45ac00187d767e22a9a231f734989": {
    "date": "2024-04-07T20:17:13",
    "graph": [
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid a$ and $3 \\shortmid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 a and 3 b and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid a$ and $3 \\shortmid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 a and 3 c and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $n=3$, it suffices to prove \\ref{prop:FermatLastTheoremForThreeGen}. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent n=3, it suffices to prove . ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nshortmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "3 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $n=3$, it suffices to prove that $\\forall a, b, c \\in \\mathbb {Z}$ if $c \\neq 0$ and $3 \\nshortmid a$ and $3 \\nshortmid b$ and $3 \\shortmid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent n=3, it suffices to prove that \u2200a, b, c Z if c \u22600 and 3 a and 3 b and 3 c and (a,b)=1, then a3 + b3 \u2260c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid b$ and $3 \\shortmid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 b and 3 c and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "prop:FermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for $n=3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for $n=3$] \\label{prop:FermatLastTheoremForThreeGen} \\lean{FermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$ if $c \\neq 0$ and $\\lambda \\nshortmid a$ and $\\lambda \\nshortmid b$ and $\\lambda \\shortmid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Proposition",
        "node_caption_name": "Theorem",
        "node_tag_name": "proposition",
        "node_full_title": "8 Generalised Fermat\u2019s Last Theorem for $n=3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K if c \u22600 and \u03bba and \u03bbb and \u03bbc and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": false
      }
    ]
  },
  "5d10e588348ae7e2266c26ef436daedf9ad2a1f2": {
    "date": "2024-04-07T20:22:40",
    "graph": [
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid a$ and $3 \\shortmid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 a and 3 c and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid a$ and $3 \\shortmid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 a and 3 b and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid b$ and $3 \\shortmid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 b and 3 c and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $n=3$, it suffices to prove \\ref{prop:FermatLastTheoremForThreeGen}. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent n=3, it suffices to prove . ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "prop:FermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for $n=3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for $n=3$] \\label{prop:FermatLastTheoremForThreeGen} \\lean{FermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$ if $c \\neq 0$ and $\\lambda \\nshortmid a$ and $\\lambda \\nshortmid b$ and $\\lambda \\shortmid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Proposition",
        "node_caption_name": "Theorem",
        "node_tag_name": "proposition",
        "node_full_title": "8 Generalised Fermat\u2019s Last Theorem for $n=3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K if c \u22600 and \u03bba and \u03bbb and \u03bbc and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": false
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nshortmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "3 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $n=3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nshortmid a \\text{ and } 3 \\nshortmid b \\text{ and } 3 \\shortmid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent n=3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "4ac26f69570a9d04954ef165e918eb85d0a7d4fb": {
    "date": "2024-04-07T20:28:17",
    "graph": [
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "prop:FermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for $n=3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for $n=3$] \\label{prop:FermatLastTheoremForThreeGen} \\lean{FermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$ if $c \\neq 0$ and $\\lambda \\nshortmid a$ and $\\lambda \\nshortmid b$ and $\\lambda \\shortmid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Proposition",
        "node_caption_name": "Theorem",
        "node_tag_name": "proposition",
        "node_full_title": "11 Generalised Fermat\u2019s Last Theorem for $n=3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K if c \u22600 and \u03bba and \u03bbb and \u03bbc and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": false
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nshortmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "6 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $n=3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nshortmid a \\text{ and } 3 \\nshortmid b \\text{ and } 3 \\shortmid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent n=3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid a$ and $3 \\shortmid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 a and 3 b and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid a$ and $3 \\shortmid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 a and 3 c and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid b$ and $3 \\shortmid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 b and 3 c and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $n=3$, it suffices to prove \\ref{prop:FermatLastTheoremForThreeGen}. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent n=3, it suffices to prove . ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "9c372196305a88681a3c381abcc61b8a52bf395e": {
    "date": "2024-04-07T20:30:07",
    "graph": [
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid a$ and $3 \\shortmid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 a and 3 c and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $n=3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nshortmid a \\text{ and } 3 \\nshortmid b \\text{ and } 3 \\shortmid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent n=3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid a$ and $3 \\shortmid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 a and 3 b and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid b$ and $3 \\shortmid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 b and 3 c and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove \\ref{thm:fermatLastTheoremThree}, it suffices to prove \\ref{prop:FermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{prop:FermatLastTheoremForThreeGen} implies \\ref{thm:fermatLastTheoremThree}. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove , it suffices to prove . Equivalently,  implies . ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "prop:FermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for $n=3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for $n=3$] \\label{prop:FermatLastTheoremForThreeGen} \\lean{FermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$ if $c \\neq 0$ and $\\lambda \\nshortmid a$ and $\\lambda \\nshortmid b$ and $\\lambda \\shortmid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Proposition",
        "node_caption_name": "Theorem",
        "node_tag_name": "proposition",
        "node_full_title": "11 Generalised Fermat\u2019s Last Theorem for $n=3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K if c \u22600 and \u03bba and \u03bbb and \u03bbc and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": false
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nshortmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "6 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "43a22bd91b2a2371c3c90a4920d63f39dc93e428": {
    "date": "2024-04-07T20:31:10",
    "graph": [
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid a$ and $3 \\shortmid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 a and 3 c and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nshortmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "6 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $n=3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nshortmid a \\text{ and } 3 \\nshortmid b \\text{ and } 3 \\shortmid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent n=3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid a$ and $3 \\shortmid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 a and 3 b and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid b$ and $3 \\shortmid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 b and 3 c and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove \\ref{thm:fermatLastTheoremThree}, it suffices to prove \\ref{prop:FermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{prop:FermatLastTheoremForThreeGen} implies \\ref{thm:fermatLastTheoremThree}. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove , it suffices to prove . Equivalently,  implies . ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "prop:FermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for $n=3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for $n=3$] \\label{prop:FermatLastTheoremForThreeGen} \\lean{FermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$ if $c \\neq 0$ and $\\lambda \\nshortmid a$ and $\\lambda \\nshortmid b$ and $\\lambda \\shortmid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Proposition",
        "node_caption_name": "Theorem",
        "node_tag_name": "proposition",
        "node_full_title": "11 Generalised Fermat\u2019s Last Theorem for $n=3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K if c \u22600 and \u03bba and \u03bbb and \u03bbc and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": false
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "13 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "32228b1a75351b9b05507871445ec6f5b0614554": {
    "date": "2024-04-07T20:32:51",
    "graph": [
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid a$ and $3 \\shortmid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 a and 3 b and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid a$ and $3 \\shortmid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 a and 3 c and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid b$ and $3 \\shortmid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 b and 3 c and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $n=3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nshortmid a \\text{ and } 3 \\nshortmid b \\text{ and } 3 \\shortmid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent n=3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "13 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove \\ref{thm:fermatLastTheoremThree}, it suffices to prove \\ref{prop:FermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{prop:FermatLastTheoremForThreeGen} implies \\ref{thm:fermatLastTheoremThree}. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove , it suffices to prove . Equivalently,  implies . ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "prop:FermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{prop:FermatLastTheoremForThreeGen} \\lean{FermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nshortmid a$ and $\\lambda \\nshortmid b$ and $\\lambda \\shortmid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Proposition",
        "node_caption_name": "Theorem",
        "node_tag_name": "proposition",
        "node_full_title": "11 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bbc and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": false
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nshortmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "6 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "9dfe449dd1334cdd712a8df0eda8f7722ac73f18": {
    "date": "2024-04-07T20:45:37",
    "graph": [
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid a$ and $3 \\shortmid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 a and 3 c and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nshortmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "6 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "13 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": false
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid a$ and $3 \\shortmid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 a and 3 b and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid b$ and $3 \\shortmid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 b and 3 c and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [
          "prop:FermatLastTheoremForThreeGen",
          "thm:fermatLastTheoremThree_of_three_dvd_only_c",
          "lmm:norm_lambda_prime",
          "lmm:norm_lambda",
          "lmm:lambda_dvd_three"
        ],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok \\uses{prop:FermatLastTheoremForThreeGen} To prove \\ref{thm:fermatLastTheoremThree}, it suffices to prove \\ref{prop:FermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{prop:FermatLastTheoremForThreeGen} implies \\ref{thm:fermatLastTheoremThree}. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   To prove , it suffices to prove . Equivalently,  implies . ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": false
      },
      {
        "id": "prop:FermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{prop:FermatLastTheoremForThreeGen} \\lean{FermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nshortmid a$ and $\\lambda \\nshortmid b$ and $\\lambda \\shortmid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Proposition",
        "node_caption_name": "Theorem",
        "node_tag_name": "proposition",
        "node_full_title": "11 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bbc and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": false
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $n=3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nshortmid a \\text{ and } 3 \\nshortmid b \\text{ and } 3 \\shortmid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent n=3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "80d921f85cff81df587f49178bd98978a2c16dd6": {
    "date": "2024-04-07T21:01:42",
    "graph": [
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid a$ and $3 \\shortmid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 a and 3 c and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [
          "prop:FermatLastTheoremForThreeGen",
          "thm:fermatLastTheoremThree_of_three_dvd_only_c",
          "lmm:norm_lambda_prime",
          "lmm:norm_lambda",
          "lmm:lambda_dvd_three"
        ],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok \\uses{prop:FermatLastTheoremForThreeGen} To prove \\ref{thm:fermatLastTheoremThree}, it suffices to prove \\ref{prop:FermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{prop:FermatLastTheoremForThreeGen} implies \\ref{thm:fermatLastTheoremThree}. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   To prove , it suffices to prove . Equivalently,  implies . ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": false
      },
      {
        "id": "prop:FermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{prop:FermatLastTheoremForThreeGen} \\lean{FermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nshortmid a$ and $\\lambda \\nshortmid b$ and $\\lambda \\shortmid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Proposition",
        "node_caption_name": "Theorem",
        "node_tag_name": "proposition",
        "node_full_title": "11 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bbc and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": false
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid a$ and $3 \\shortmid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 a and 3 b and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid b$ and $3 \\shortmid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 b and 3 c and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nshortmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "6 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $n=3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nshortmid a \\text{ and } 3 \\nshortmid b \\text{ and } 3 \\shortmid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent n=3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "13 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": false
      }
    ]
  },
  "b7a523ab3f57a5f4aad448fecd8e87bd299df1af": {
    "date": "2024-04-07T21:25:57",
    "graph": [
      {
        "id": "def:Solution'",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution$'$",
        "node_source": "\\begin{thmenv}[Solution$'$] \\label{def:Solution'} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nshortmid a$, $\\lambda \\nshortmid b$, $\\lambda \\shortmid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ A $\\bold {solution\u2019}$ is a tuple $(a, b, c, u)$ given by a solution to the equation $a^3 + b^3 = u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "13 Solution$'$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bbc, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) given by a solution to the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nshortmid a$, $\\lambda \\nshortmid b$, $\\lambda \\shortmid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\shortmid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ A $\\bold {solution}$ is a tuple $(a, b, c, u)$ given by a solution to the equation $a^3 + b^3 = u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "14 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bbc, c \u22600, (a,b)=1 and \u03bb2 a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) given by a solution to the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [
          "prop:FermatLastTheoremForThreeGen",
          "thm:fermatLastTheoremThree_of_three_dvd_only_c",
          "lmm:norm_lambda_prime",
          "lmm:norm_lambda",
          "lmm:lambda_dvd_three"
        ],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok \\uses{prop:FermatLastTheoremForThreeGen} To prove \\ref{thm:fermatLastTheoremThree}, it suffices to prove \\ref{prop:FermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{prop:FermatLastTheoremForThreeGen} implies \\ref{thm:fermatLastTheoremThree}. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   To prove , it suffices to prove . Equivalently,  implies . ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": false
      },
      {
        "id": "prop:FermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{prop:FermatLastTheoremForThreeGen} \\lean{FermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nshortmid a$ and $\\lambda \\nshortmid b$ and $\\lambda \\shortmid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Proposition",
        "node_caption_name": "Theorem",
        "node_tag_name": "proposition",
        "node_full_title": "11 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bbc and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": false
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $n=3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nshortmid a \\text{ and } 3 \\nshortmid b \\text{ and } 3 \\shortmid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent n=3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid a$ and $3 \\shortmid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 a and 3 b and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid a$ and $3 \\shortmid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 a and 3 c and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\shortmid b$ and $3 \\shortmid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\shortmid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 b and 3 c and a 3 + b 3 = c 3, then 3 (a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nshortmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "6 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "15 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": false
      }
    ]
  },
  "042bb9f58482ea7b933997364ec17d984f4786be": {
    "date": "2024-04-07T21:51:22",
    "graph": [
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "6 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $n=3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent n=3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "13 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution'",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution$'$",
        "node_source": "\\begin{thmenv}[Solution$'$] \\label{def:Solution'} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ given by a solution to the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "11 Solution$'$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) given by a solution to the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ given by a solution to the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "12 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) given by a solution to the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove \\ref{thm:fermatLastTheoremThree}, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies \\ref{thm:fermatLastTheoremThree}. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove , it suffices to prove . Equivalently,  implies . ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "15 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "4f2624dc8dda5ae3ff979a21c9b56813af0c9f3d": {
    "date": "2024-04-07T21:53:24",
    "graph": [
      {
        "id": "def:Solution'",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution$'$",
        "node_source": "\\begin{thmenv}[Solution$'$] \\label{def:Solution'} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "11 Solution$'$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "6 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "13 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "15 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "12 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove \\ref{thm:fermatLastTheoremThree}, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies \\ref{thm:fermatLastTheoremThree}. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove , it suffices to prove . Equivalently,  implies . ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $n=3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent n=3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "35b19f3a9e6793ce1a48069dbfe9e416b9fc273f": {
    "date": "2024-04-07T21:54:57",
    "graph": [
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "6 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "13 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "15 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution'",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution$'$",
        "node_source": "\\begin{thmenv}[Solution$'$] \\label{def:Solution'} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "11 Solution$'$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "12 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove \\ref{thm:fermatLastTheoremThree}, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies \\ref{thm:fermatLastTheoremThree}. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove , it suffices to prove . Equivalently,  implies . ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove \\ref{thm:fermatLastTheoremThree}, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove , it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "fc032954f62cb8f59466a144dcb88300d7d0acf8": {
    "date": "2024-04-07T22:04:40",
    "graph": [
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "12 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove \\ref{thm:fermatLastTheoremThree}, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies \\ref{thm:fermatLastTheoremThree}. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove , it suffices to prove . Equivalently,  implies . ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "6 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution'",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution$'$",
        "node_source": "\\begin{thmenv}[Solution$'$] \\label{def:Solution'} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "11 Solution$'$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove \\ref{thm:fermatLastTheoremThree}, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove , it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "13 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "15 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "6382593b0de31993e3cdac9ac5ba949a847b4f96": {
    "date": "2024-04-07T22:04:56",
    "graph": [
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove \\ref{thm:fermatLastTheoremThree}, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies \\ref{thm:fermatLastTheoremThree}. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove , it suffices to prove . Equivalently,  implies . ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "13 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution'",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution$'$",
        "node_source": "\\begin{thmenv}[Solution$'$] \\label{def:Solution'} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "11 Solution$'$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "12 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "6 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove \\ref{thm:fermatLastTheoremThree}, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove , it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "15 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "c185aeed77e3c02466d62b07651f3d52eb43571d": {
    "date": "2024-04-07T22:11:09",
    "graph": [
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "12 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove \\ref{thm:fermatLastTheoremThree}, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies \\ref{thm:fermatLastTheoremThree}. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove , it suffices to prove . Equivalently,  implies . ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "6 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "15 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution'",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution$'$",
        "node_source": "\\begin{thmenv}[Solution$'$] \\label{def:Solution'} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "11 Solution$'$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove \\ref{thm:fermatLastTheoremThree}, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove , it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "13 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "d72b61d9c72b644963a84ce5748952c3c8806294": {
    "date": "2024-04-07T22:22:12",
    "graph": [
      {
        "id": "def:Solution'",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution$'$",
        "node_source": "\\begin{thmenv}[Solution$'$] \\label{def:Solution'} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "11 Solution$'$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "6 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "13 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "12 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "15 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "9418c5e3f94fb2fc06ab239285e4e0b7cdbfc48a": {
    "date": "2024-04-07T22:24:19",
    "graph": [
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "12 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "15 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution$'$",
        "node_source": "\\begin{thmenv}[Solution$'$] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "11 Solution$'$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "6 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "13 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "ad9f47961e1f70b2e6d02fce37f3f1ba7fb50767": {
    "date": "2024-04-07T22:25:45",
    "graph": [
      {
        "id": "def:Solution'",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution$'$",
        "node_source": "\\begin{thmenv}[Solution$'$] \\label{def:Solution'} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "11 Solution$'$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "13 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "15 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "12 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "6 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "0119345cd7b60ef2e6d3d81b08dea11b3c54ec64": {
    "date": "2024-04-07T22:32:42",
    "graph": [
      {
        "id": "def:Solution'",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution'} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "11 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "6 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "12 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "13 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "15 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "0ca05f9dbae7d555ea6f689ca5ed229997cec745": {
    "date": "2024-04-07T22:36:29",
    "graph": [
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "11 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "6 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "13 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "12 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "15 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "2b768f774acdcc82aaf9050622dab0fe00e13e48": {
    "date": "2024-04-08T06:52:07",
    "graph": [
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "25 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "29 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "27 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "19 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "24 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "d5fdbd6cecad001eaa1a9000aa89f0b24aae2ad8": {
    "date": "2024-04-08T06:55:28",
    "graph": [
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "22 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "30 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "32 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "27 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "28 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "d1392540de2df674eac783bd46a22143ee337b59": {
    "date": "2024-04-08T06:57:13",
    "graph": [
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "28 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "22 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "30 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "27 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "32 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "568b4e67fbfda4d47e30020fd236a8a79ea569cc": {
    "date": "2024-04-08T07:07:07",
    "graph": [
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_cube_b_cube_same_congr",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_two"
        ],
        "node_lean_decls": [
          "a_cube_b_cube_same_congr"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_cube_b_cube_same_congr} \\lean{a_cube_b_cube_same_congr} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "38 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.exists_minimal",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution.exists_minimal"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.exists_minimal} \\lean{Solution.exists_minimal} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.two_le_multiplicity",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c"
        ],
        "node_lean_decls": [
          "Solution'.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.two_le_multiplicity} \\lean{Solution'.two_le_multiplicity} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.two_le_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1.two_le_multiplicity"
        ],
        "node_lean_decls": [
          "Solution.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.two_le_multiplicity} \\lean{Solution.two_le_multiplicity} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_c_cube",
        "node_deps": [
          "def:Solution1",
          "lmm:a_cube_b_cube_same_congr"
        ],
        "node_lean_decls": [
          "lambda_pow_four_dvd_c_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_c_cube} \\lean{lambda_pow_four_dvd_c_cube} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_two_dvd_c",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_c_cube"
        ],
        "node_lean_decls": [
          "lambda_pow_two_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_two_dvd_c} \\lean{lambda_pow_two_dvd_c} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "22 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "28 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "27 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "36 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "ee14eaa1300f4d535238115cc3e5233748151ba7": {
    "date": "2024-04-08T07:13:24",
    "graph": [
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.exists_minimal",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution.exists_minimal"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.exists_minimal} \\lean{Solution.exists_minimal} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_c_cube",
        "node_deps": [
          "def:Solution1",
          "lmm:a_cube_b_cube_same_congr"
        ],
        "node_lean_decls": [
          "lambda_pow_four_dvd_c_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_c_cube} \\lean{lambda_pow_four_dvd_c_cube} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.two_le_multiplicity",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c"
        ],
        "node_lean_decls": [
          "Solution'.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.two_le_multiplicity} \\lean{Solution'.two_le_multiplicity} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_add_cube_eq_mul",
        "node_deps": [
          "def:Solution1",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "cube_add_cube_eq_mul"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_add_cube_eq_mul} \\lean{cube_add_cube_eq_mul} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "28 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_or_dvd_or_dvd",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c",
          "lmm:cube_add_cube_eq_mul",
          "lmm:zeta_sub_one_prime1"
        ],
        "node_lean_decls": [
          "lambda_sq_dvd_or_dvd_or_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_or_dvd_or_dvd} \\lean{lambda_sq_dvd_or_dvd_or_dvd} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:ex_dvd_a_add_b",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_sq_dvd_or_dvd_or_dvd",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "ex_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:ex_dvd_a_add_b} \\lean{ex_dvd_a_add_b} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "22 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "42 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "40 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "27 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.two_le_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1.two_le_multiplicity"
        ],
        "node_lean_decls": [
          "Solution.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.two_le_multiplicity} \\lean{Solution.two_le_multiplicity} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_of_Solution'",
        "node_deps": [
          "def:Solution1",
          "def:Solution",
          "lmm:ex_dvd_a_add_b"
        ],
        "node_lean_decls": [
          "exists_Solution_of_Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_of_Solution'} \\lean{exists_Solution_of_Solution'} \\leanok \\uses{def:Solution1, def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_cube_b_cube_same_congr",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_two"
        ],
        "node_lean_decls": [
          "a_cube_b_cube_same_congr"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_cube_b_cube_same_congr} \\lean{a_cube_b_cube_same_congr} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_two_dvd_c",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_c_cube"
        ],
        "node_lean_decls": [
          "lambda_pow_two_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_two_dvd_c} \\lean{lambda_pow_two_dvd_c} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "60618d5b4140672df4d18c3617e329baddff63d5": {
    "date": "2024-04-08T07:19:26",
    "graph": [
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.two_le_multiplicity",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c"
        ],
        "node_lean_decls": [
          "Solution'.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.two_le_multiplicity} \\lean{Solution'.two_le_multiplicity} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_a_add_eta_mul_b} \\lean{lambda_sq_not_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "28 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.exists_minimal",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution.exists_minimal"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.exists_minimal} \\lean{Solution.exists_minimal} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_add_cube_eq_mul",
        "node_deps": [
          "def:Solution1",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "cube_add_cube_eq_mul"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_add_cube_eq_mul} \\lean{cube_add_cube_eq_mul} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_or_dvd_or_dvd",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c",
          "lmm:cube_add_cube_eq_mul",
          "lmm:zeta_sub_one_prime1"
        ],
        "node_lean_decls": [
          "lambda_sq_dvd_or_dvd_or_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_or_dvd_or_dvd} \\lean{lambda_sq_dvd_or_dvd_or_dvd} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_of_Solution'",
        "node_deps": [
          "def:Solution1",
          "def:Solution",
          "lmm:ex_dvd_a_add_b"
        ],
        "node_lean_decls": [
          "exists_Solution_of_Solution1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_of_Solution'} \\lean{exists_Solution_of_Solution1} \\leanok \\uses{def:Solution1, def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "lambda_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_sq_mul_b} \\lean{lambda_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.two_le_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1.two_le_multiplicity"
        ],
        "node_lean_decls": [
          "Solution.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.two_le_multiplicity} \\lean{Solution.two_le_multiplicity} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:ex_dvd_a_add_b",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_sq_dvd_or_dvd_or_dvd",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "ex_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:ex_dvd_a_add_b} \\lean{ex_dvd_a_add_b} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "48 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "22 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "46 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_add_eta_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "lambda_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_add_eta_b} \\lean{lambda_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\lean{lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "27 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_cube_b_cube_same_congr",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_two"
        ],
        "node_lean_decls": [
          "a_cube_b_cube_same_congr"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_cube_b_cube_same_congr} \\lean{a_cube_b_cube_same_congr} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "lambda_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_ne_zero} \\lean{lambda_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b"
        ],
        "node_lean_decls": [
          "lambda_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_mul_b} \\lean{lambda_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_c_cube",
        "node_deps": [
          "def:Solution1",
          "lmm:a_cube_b_cube_same_congr"
        ],
        "node_lean_decls": [
          "lambda_pow_four_dvd_c_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_c_cube} \\lean{lambda_pow_four_dvd_c_cube} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_two_dvd_c",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_c_cube"
        ],
        "node_lean_decls": [
          "lambda_pow_two_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_two_dvd_c} \\lean{lambda_pow_two_dvd_c} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "c9d3ed7044285fcc0050924e1d29e783545a07a6": {
    "date": "2024-04-08T07:34:50",
    "graph": [
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_c_cube",
        "node_deps": [
          "def:Solution1",
          "lmm:a_cube_b_cube_same_congr"
        ],
        "node_lean_decls": [
          "lambda_pow_four_dvd_c_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_c_cube} \\lean{lambda_pow_four_dvd_c_cube} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_lean_decls": [
          "lambda_not_dvd_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_y} \\lean{lambda_not_dvd_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_x",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_dvd_a_add_eta_mul_b",
          "lmm:lambda_dvd_a_add_eta_sq_mul_b",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_w",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "lambda_not_dvd_x"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_x} \\lean{lambda_not_dvd_x} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "22 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "27 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_or_dvd_or_dvd",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c",
          "lmm:cube_add_cube_eq_mul",
          "lmm:zeta_sub_one_prime1"
        ],
        "node_lean_decls": [
          "lambda_sq_dvd_or_dvd_or_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_or_dvd_or_dvd} \\lean{lambda_sq_dvd_or_dvd_or_dvd} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_lean_decls": [
          "lambda_not_dvd_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_z} \\lean{lambda_not_dvd_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_w",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "lambda_not_dvd_w"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_w} \\lean{lambda_not_dvd_w} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "lambda_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_sq_mul_b} \\lean{lambda_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.exists_minimal",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution.exists_minimal"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.exists_minimal} \\lean{Solution.exists_minimal} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b"
        ],
        "node_lean_decls": [
          "lambda_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_mul_b} \\lean{lambda_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_a_add_eta_mul_b} \\lean{lambda_sq_not_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_add_one_inv",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "eta_add_one_inv"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_add_one_inv} \\lean{eta_add_one_inv} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_add_cube_eq_mul",
        "node_deps": [
          "def:Solution1",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "cube_add_cube_eq_mul"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_add_cube_eq_mul} \\lean{cube_add_cube_eq_mul} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_of_Solution'",
        "node_deps": [
          "def:Solution1",
          "def:Solution",
          "lmm:ex_dvd_a_add_b"
        ],
        "node_lean_decls": [
          "exists_Solution_of_Solution1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_of_Solution'} \\lean{exists_Solution_of_Solution1} \\leanok \\uses{def:Solution1, def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\lean{lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\lean{associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "55 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:ex_dvd_a_add_b",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_sq_dvd_or_dvd_or_dvd",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "ex_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:ex_dvd_a_add_b} \\lean{ex_dvd_a_add_b} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\lean{associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "28 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.two_le_multiplicity",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c"
        ],
        "node_lean_decls": [
          "Solution'.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.two_le_multiplicity} \\lean{Solution'.two_le_multiplicity} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "lambda_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_ne_zero} \\lean{lambda_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_dvd_a_add_b",
        "node_deps": [
          "def:Solution",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_z",
          "lmm:lambda_not_dvd_y",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "lambda_pow_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_dvd_a_add_b} \\lean{lambda_pow_dvd_a_add_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_cube_b_cube_same_congr",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_two"
        ],
        "node_lean_decls": [
          "a_cube_b_cube_same_congr"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_cube_b_cube_same_congr} \\lean{a_cube_b_cube_same_congr} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_two_dvd_c",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_c_cube"
        ],
        "node_lean_decls": [
          "lambda_pow_two_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_two_dvd_c} \\lean{lambda_pow_two_dvd_c} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.two_le_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1.two_le_multiplicity"
        ],
        "node_lean_decls": [
          "Solution.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.two_le_multiplicity} \\lean{Solution.two_le_multiplicity} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_add_eta_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "lambda_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_add_eta_b} \\lean{lambda_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime",
          "lmm:eta_add_one_inv",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\lean{associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "57 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "d094789d4512f7db37e4e36832257281004da35f": {
    "date": "2024-04-08T07:44:15",
    "graph": [
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.two_le_multiplicity",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c"
        ],
        "node_lean_decls": [
          "Solution'.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.two_le_multiplicity} \\lean{Solution'.two_le_multiplicity} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_add_cube_eq_mul",
        "node_deps": [
          "def:Solution1",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "cube_add_cube_eq_mul"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_add_cube_eq_mul} \\lean{cube_add_cube_eq_mul} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_of_Solution'",
        "node_deps": [
          "def:Solution1",
          "def:Solution",
          "lmm:ex_dvd_a_add_b"
        ],
        "node_lean_decls": [
          "exists_Solution_of_Solution1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_of_Solution'} \\lean{exists_Solution_of_Solution1} \\leanok \\uses{def:Solution1, def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_a_add_eta_mul_b} \\lean{lambda_sq_not_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_lean_decls": [
          "lambda_not_dvd_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_z} \\lean{lambda_not_dvd_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "61 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "22 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "28 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:ex_dvd_a_add_b",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_sq_dvd_or_dvd_or_dvd",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "ex_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:ex_dvd_a_add_b} \\lean{ex_dvd_a_add_b} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "lambda_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_ne_zero} \\lean{lambda_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\lean{lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula1",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "formula1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula1} \\lean{formula1} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_or_dvd_or_dvd",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c",
          "lmm:cube_add_cube_eq_mul",
          "lmm:zeta_sub_one_prime1"
        ],
        "node_lean_decls": [
          "lambda_sq_dvd_or_dvd_or_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_or_dvd_or_dvd} \\lean{lambda_sq_dvd_or_dvd_or_dvd} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_x",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_dvd_a_add_eta_mul_b",
          "lmm:lambda_dvd_a_add_eta_sq_mul_b",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_w",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "lambda_not_dvd_x"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_x} \\lean{lambda_not_dvd_x} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.exists_minimal",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution.exists_minimal"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.exists_minimal} \\lean{Solution.exists_minimal} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_add_eta_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "lambda_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_add_eta_b} \\lean{lambda_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b"
        ],
        "node_lean_decls": [
          "lambda_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_mul_b} \\lean{lambda_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\lean{associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_dvd_a_add_b",
        "node_deps": [
          "def:Solution",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_z",
          "lmm:lambda_not_dvd_y",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "lambda_pow_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_dvd_a_add_b} \\lean{lambda_pow_dvd_a_add_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula2",
        "node_deps": [
          "def:Solution",
          "lmm:eta_isUnit",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_cube_eq_one",
          "lmm:formula1"
        ],
        "node_lean_decls": [
          "formula2"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula2} \\lean{formula2} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_c_cube",
        "node_deps": [
          "def:Solution1",
          "lmm:a_cube_b_cube_same_congr"
        ],
        "node_lean_decls": [
          "lambda_pow_four_dvd_c_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_c_cube} \\lean{lambda_pow_four_dvd_c_cube} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "lambda_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_sq_mul_b} \\lean{lambda_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_lean_decls": [
          "lambda_not_dvd_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_y} \\lean{lambda_not_dvd_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_w",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "lambda_not_dvd_w"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_w} \\lean{lambda_not_dvd_w} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_cube_b_cube_same_congr",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_two"
        ],
        "node_lean_decls": [
          "a_cube_b_cube_same_congr"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_cube_b_cube_same_congr} \\lean{a_cube_b_cube_same_congr} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.two_le_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1.two_le_multiplicity"
        ],
        "node_lean_decls": [
          "Solution.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.two_le_multiplicity} \\lean{Solution.two_le_multiplicity} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\lean{associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "coprime_x_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_z} \\lean{coprime_x_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "27 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_add_one_inv",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "eta_add_one_inv"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_add_one_inv} \\lean{eta_add_one_inv} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime",
          "lmm:eta_add_one_inv",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\lean{associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "63 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_two_dvd_c",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_c_cube"
        ],
        "node_lean_decls": [
          "lambda_pow_two_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_two_dvd_c} \\lean{lambda_pow_two_dvd_c} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_y_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "coprime_y_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_y_z} \\lean{coprime_y_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "838931163a348ef7b915c3a1b1316501ba3d6592": {
    "date": "2024-04-08T07:49:13",
    "graph": [
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "28 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_y_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "cSolution.oprime_y_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_y_z} \\lean{cSolution.oprime_y_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_w",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_w"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_w} \\lean{Solution.lambda_not_dvd_w} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.two_le_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1.two_le_multiplicity"
        ],
        "node_lean_decls": [
          "Solution.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.two_le_multiplicity} \\lean{Solution.two_le_multiplicity} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_of_Solution'",
        "node_deps": [
          "def:Solution1",
          "def:Solution",
          "lmm:ex_dvd_a_add_b"
        ],
        "node_lean_decls": [
          "exists_Solution_of_Solution1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_of_Solution'} \\lean{exists_Solution_of_Solution1} \\leanok \\uses{def:Solution1, def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "61 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_two_dvd_c",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_c_cube"
        ],
        "node_lean_decls": [
          "lambda_pow_two_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_two_dvd_c} \\lean{lambda_pow_two_dvd_c} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_y} \\lean{Solution.lambda_not_dvd_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_z} \\lean{Solution.coprime_x_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula1",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "formula1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula1} \\lean{formula1} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_or_dvd_or_dvd",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c",
          "lmm:cube_add_cube_eq_mul",
          "lmm:zeta_sub_one_prime1"
        ],
        "node_lean_decls": [
          "lambda_sq_dvd_or_dvd_or_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_or_dvd_or_dvd} \\lean{lambda_sq_dvd_or_dvd_or_dvd} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_a_add_eta_mul_b} \\lean{Solution.lambda_sq_not_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_add_one_inv",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.eta_add_one_inv"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_add_one_inv} \\lean{Solution.eta_add_one_inv} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_x",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_dvd_a_add_eta_mul_b",
          "lmm:lambda_dvd_a_add_eta_sq_mul_b",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_w",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_x"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_x} \\lean{Solution.lambda_not_dvd_x} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.lambda_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_ne_zero} \\lean{Solution.lambda_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula2",
        "node_deps": [
          "def:Solution",
          "lmm:eta_isUnit",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_cube_eq_one",
          "lmm:formula1"
        ],
        "node_lean_decls": [
          "formula2"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula2} \\lean{formula2} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_c_cube",
        "node_deps": [
          "def:Solution1",
          "lmm:a_cube_b_cube_same_congr"
        ],
        "node_lean_decls": [
          "lambda_pow_four_dvd_c_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_c_cube} \\lean{lambda_pow_four_dvd_c_cube} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_add_cube_eq_mul",
        "node_deps": [
          "def:Solution1",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "cube_add_cube_eq_mul"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_add_cube_eq_mul} \\lean{cube_add_cube_eq_mul} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_dvd_a_add_b",
        "node_deps": [
          "def:Solution",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_z",
          "lmm:lambda_not_dvd_y",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_pow_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_dvd_a_add_b} \\lean{Solution.lambda_pow_dvd_a_add_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "27 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.exists_minimal",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution.exists_minimal"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.exists_minimal} \\lean{Solution.exists_minimal} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_cube_b_cube_same_congr",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_two"
        ],
        "node_lean_decls": [
          "a_cube_b_cube_same_congr"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_cube_b_cube_same_congr} \\lean{a_cube_b_cube_same_congr} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:ex_dvd_a_add_b",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_sq_dvd_or_dvd_or_dvd",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "ex_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:ex_dvd_a_add_b} \\lean{ex_dvd_a_add_b} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.two_le_multiplicity",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c"
        ],
        "node_lean_decls": [
          "Solution'.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.two_le_multiplicity} \\lean{Solution'.two_le_multiplicity} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_add_eta_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.a_add_eta_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_add_eta_b} \\lean{Solution.a_add_eta_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_z} \\lean{Solution.lambda_not_dvd_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "22 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "63 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime",
          "lmm:eta_add_one_inv",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "89baaf0cb021c36d051b1aea9d501ba4d1302b7d": {
    "date": "2024-04-08T07:49:47",
    "graph": [
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.two_le_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1.two_le_multiplicity"
        ],
        "node_lean_decls": [
          "Solution.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.two_le_multiplicity} \\lean{Solution.two_le_multiplicity} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula2",
        "node_deps": [
          "def:Solution",
          "lmm:eta_isUnit",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_cube_eq_one",
          "lmm:formula1"
        ],
        "node_lean_decls": [
          "Solution.formula2"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula2} \\lean{Solution.formula2} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "27 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.exists_minimal",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution.exists_minimal"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.exists_minimal} \\lean{Solution.exists_minimal} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_two_dvd_c",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_c_cube"
        ],
        "node_lean_decls": [
          "lambda_pow_two_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_two_dvd_c} \\lean{lambda_pow_two_dvd_c} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_add_one_inv",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.eta_add_one_inv"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_add_one_inv} \\lean{Solution.eta_add_one_inv} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime",
          "lmm:eta_add_one_inv",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_z} \\lean{Solution.lambda_not_dvd_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "61 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_add_cube_eq_mul",
        "node_deps": [
          "def:Solution1",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "cube_add_cube_eq_mul"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_add_cube_eq_mul} \\lean{cube_add_cube_eq_mul} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "28 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:ex_dvd_a_add_b",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_sq_dvd_or_dvd_or_dvd",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "ex_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:ex_dvd_a_add_b} \\lean{ex_dvd_a_add_b} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.lambda_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_ne_zero} \\lean{Solution.lambda_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_a_add_eta_mul_b} \\lean{Solution.lambda_sq_not_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_z} \\lean{Solution.coprime_x_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_y_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "cSolution.oprime_y_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_y_z} \\lean{cSolution.oprime_y_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.two_le_multiplicity",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c"
        ],
        "node_lean_decls": [
          "Solution'.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.two_le_multiplicity} \\lean{Solution'.two_le_multiplicity} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_add_eta_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.a_add_eta_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_add_eta_b} \\lean{Solution.a_add_eta_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula1",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.formula1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula1} \\lean{Solution.formula1} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_or_dvd_or_dvd",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c",
          "lmm:cube_add_cube_eq_mul",
          "lmm:zeta_sub_one_prime1"
        ],
        "node_lean_decls": [
          "lambda_sq_dvd_or_dvd_or_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_or_dvd_or_dvd} \\lean{lambda_sq_dvd_or_dvd_or_dvd} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_dvd_a_add_b",
        "node_deps": [
          "def:Solution",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_z",
          "lmm:lambda_not_dvd_y",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_pow_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_dvd_a_add_b} \\lean{Solution.lambda_pow_dvd_a_add_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_x",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_dvd_a_add_eta_mul_b",
          "lmm:lambda_dvd_a_add_eta_sq_mul_b",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_w",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_x"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_x} \\lean{Solution.lambda_not_dvd_x} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "63 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_cube_b_cube_same_congr",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_two"
        ],
        "node_lean_decls": [
          "a_cube_b_cube_same_congr"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_cube_b_cube_same_congr} \\lean{a_cube_b_cube_same_congr} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_c_cube",
        "node_deps": [
          "def:Solution1",
          "lmm:a_cube_b_cube_same_congr"
        ],
        "node_lean_decls": [
          "lambda_pow_four_dvd_c_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_c_cube} \\lean{lambda_pow_four_dvd_c_cube} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_of_Solution'",
        "node_deps": [
          "def:Solution1",
          "def:Solution",
          "lmm:ex_dvd_a_add_b"
        ],
        "node_lean_decls": [
          "exists_Solution_of_Solution1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_of_Solution'} \\lean{exists_Solution_of_Solution1} \\leanok \\uses{def:Solution1, def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_y} \\lean{Solution.lambda_not_dvd_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_w",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_w"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_w} \\lean{Solution.lambda_not_dvd_w} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "22 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "2064d1828ca26e92b35c1a7d8fd5dc98f482a6df": {
    "date": "2024-04-08T07:52:22",
    "graph": [
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_y} \\lean{Solution.lambda_not_dvd_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_w",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_w"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_w} \\lean{Solution.lambda_not_dvd_w} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula1",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.formula1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula1} \\lean{Solution.formula1} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_cube_b_cube_same_congr",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_two"
        ],
        "node_lean_decls": [
          "a_cube_b_cube_same_congr"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_cube_b_cube_same_congr} \\lean{a_cube_b_cube_same_congr} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.two_le_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1.two_le_multiplicity"
        ],
        "node_lean_decls": [
          "Solution.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.two_le_multiplicity} \\lean{Solution.two_le_multiplicity} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_add_eta_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.a_add_eta_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_add_eta_b} \\lean{Solution.a_add_eta_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "22 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime",
          "lmm:eta_add_one_inv",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula2",
        "node_deps": [
          "def:Solution",
          "lmm:eta_isUnit",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_cube_eq_one",
          "lmm:formula1"
        ],
        "node_lean_decls": [
          "Solution.formula2"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula2} \\lean{Solution.formula2} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "62 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "64 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_z} \\lean{Solution.lambda_not_dvd_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "27 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_add_cube_eq_mul",
        "node_deps": [
          "def:Solution1",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "cube_add_cube_eq_mul"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_add_cube_eq_mul} \\lean{cube_add_cube_eq_mul} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_add_one_inv",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.eta_add_one_inv"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_add_one_inv} \\lean{Solution.eta_add_one_inv} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:by_kummer",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:formula2"
        ],
        "node_lean_decls": [
          "Solution.by_kummer"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:by_kummer} \\lean{Solution.by_kummer} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_c_cube",
        "node_deps": [
          "def:Solution1",
          "lmm:a_cube_b_cube_same_congr"
        ],
        "node_lean_decls": [
          "lambda_pow_four_dvd_c_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_c_cube} \\lean{lambda_pow_four_dvd_c_cube} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.two_le_multiplicity",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c"
        ],
        "node_lean_decls": [
          "Solution'.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.two_le_multiplicity} \\lean{Solution'.two_le_multiplicity} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_or_dvd_or_dvd",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c",
          "lmm:cube_add_cube_eq_mul",
          "lmm:zeta_sub_one_prime1"
        ],
        "node_lean_decls": [
          "lambda_sq_dvd_or_dvd_or_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_or_dvd_or_dvd} \\lean{lambda_sq_dvd_or_dvd_or_dvd} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:ex_dvd_a_add_b",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_sq_dvd_or_dvd_or_dvd",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "ex_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:ex_dvd_a_add_b} \\lean{ex_dvd_a_add_b} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.lambda_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_ne_zero} \\lean{Solution.lambda_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_a_add_eta_mul_b} \\lean{Solution.lambda_sq_not_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_z} \\lean{Solution.coprime_x_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "28 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_two_dvd_c",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_c_cube"
        ],
        "node_lean_decls": [
          "lambda_pow_two_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_two_dvd_c} \\lean{lambda_pow_two_dvd_c} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_of_Solution'",
        "node_deps": [
          "def:Solution1",
          "def:Solution",
          "lmm:ex_dvd_a_add_b"
        ],
        "node_lean_decls": [
          "exists_Solution_of_Solution1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_of_Solution'} \\lean{exists_Solution_of_Solution1} \\leanok \\uses{def:Solution1, def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_x",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_dvd_a_add_eta_mul_b",
          "lmm:lambda_dvd_a_add_eta_sq_mul_b",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_w",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_x"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_x} \\lean{Solution.lambda_not_dvd_x} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.exists_minimal",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution.exists_minimal"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.exists_minimal} \\lean{Solution.exists_minimal} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_dvd_a_add_b",
        "node_deps": [
          "def:Solution",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_z",
          "lmm:lambda_not_dvd_y",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_pow_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_dvd_a_add_b} \\lean{Solution.lambda_pow_dvd_a_add_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_y_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "cSolution.oprime_y_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_y_z} \\lean{cSolution.oprime_y_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "756304edfb924efae942253ea73e3e2681bdb908": {
    "date": "2024-04-08T07:55:12",
    "graph": [
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.two_le_multiplicity",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c"
        ],
        "node_lean_decls": [
          "Solution'.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.two_le_multiplicity} \\lean{Solution'.two_le_multiplicity} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.lambda_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_ne_zero} \\lean{Solution.lambda_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_add_eta_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.a_add_eta_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_add_eta_b} \\lean{Solution.a_add_eta_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime",
          "lmm:eta_add_one_inv",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_w",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_w"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_w} \\lean{Solution.lambda_not_dvd_w} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "63 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "65 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "29 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_z} \\lean{Solution.lambda_not_dvd_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_y_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "cSolution.oprime_y_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_y_z} \\lean{cSolution.oprime_y_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "28 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.exists_minimal",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution.exists_minimal"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.exists_minimal} \\lean{Solution.exists_minimal} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_c_cube",
        "node_deps": [
          "def:Solution1",
          "lmm:a_cube_b_cube_same_congr"
        ],
        "node_lean_decls": [
          "lambda_pow_four_dvd_c_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_c_cube} \\lean{lambda_pow_four_dvd_c_cube} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_two_dvd_c",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_c_cube"
        ],
        "node_lean_decls": [
          "lambda_pow_two_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_two_dvd_c} \\lean{lambda_pow_two_dvd_c} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_y} \\lean{Solution.lambda_not_dvd_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_z} \\lean{Solution.coprime_x_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula2",
        "node_deps": [
          "def:Solution",
          "lmm:eta_isUnit",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_cube_eq_one",
          "lmm:formula1"
        ],
        "node_lean_decls": [
          "Solution.formula2"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula2} \\lean{Solution.formula2} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_cube_b_cube_same_congr",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_two"
        ],
        "node_lean_decls": [
          "a_cube_b_cube_same_congr"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_cube_b_cube_same_congr} \\lean{a_cube_b_cube_same_congr} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_of_Solution'",
        "node_deps": [
          "def:Solution1",
          "def:Solution",
          "lmm:ex_dvd_a_add_b"
        ],
        "node_lean_decls": [
          "exists_Solution_of_Solution1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_of_Solution'} \\lean{exists_Solution_of_Solution1} \\leanok \\uses{def:Solution1, def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_add_one_inv",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.eta_add_one_inv"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_add_one_inv} \\lean{Solution.eta_add_one_inv} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula1",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.formula1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula1} \\lean{Solution.formula1} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:by_kummer",
        "node_deps": [
          "def:Solution",
          "lmm:eq_one_or_neg_one_of_unit_of_congruent",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:formula2"
        ],
        "node_lean_decls": [
          "Solution.by_kummer"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:by_kummer} \\lean{Solution.by_kummer} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eq_one_or_neg_one_of_unit_of_congruent",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eq_one_or_neg_one_of_unit_of_congruent} \\lean{IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "23 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.two_le_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1.two_le_multiplicity"
        ],
        "node_lean_decls": [
          "Solution.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.two_le_multiplicity} \\lean{Solution.two_le_multiplicity} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_or_dvd_or_dvd",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c",
          "lmm:cube_add_cube_eq_mul",
          "lmm:zeta_sub_one_prime1"
        ],
        "node_lean_decls": [
          "lambda_sq_dvd_or_dvd_or_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_or_dvd_or_dvd} \\lean{lambda_sq_dvd_or_dvd_or_dvd} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_dvd_a_add_b",
        "node_deps": [
          "def:Solution",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_z",
          "lmm:lambda_not_dvd_y",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_pow_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_dvd_a_add_b} \\lean{Solution.lambda_pow_dvd_a_add_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_x",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_dvd_a_add_eta_mul_b",
          "lmm:lambda_dvd_a_add_eta_sq_mul_b",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_w",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_x"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_x} \\lean{Solution.lambda_not_dvd_x} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:ex_dvd_a_add_b",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_sq_dvd_or_dvd_or_dvd",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "ex_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:ex_dvd_a_add_b} \\lean{ex_dvd_a_add_b} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_add_cube_eq_mul",
        "node_deps": [
          "def:Solution1",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "cube_add_cube_eq_mul"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_add_cube_eq_mul} \\lean{cube_add_cube_eq_mul} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_a_add_eta_mul_b} \\lean{Solution.lambda_sq_not_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "55c223d566c1fdee00676500bf0f6fb8ccccd13d": {
    "date": "2024-04-08T07:57:02",
    "graph": [
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "28 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.two_le_multiplicity",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c"
        ],
        "node_lean_decls": [
          "Solution'.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.two_le_multiplicity} \\lean{Solution'.two_le_multiplicity} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_add_cube_eq_mul",
        "node_deps": [
          "def:Solution1",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "cube_add_cube_eq_mul"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_add_cube_eq_mul} \\lean{cube_add_cube_eq_mul} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_of_Solution'",
        "node_deps": [
          "def:Solution1",
          "def:Solution",
          "lmm:ex_dvd_a_add_b"
        ],
        "node_lean_decls": [
          "exists_Solution_of_Solution1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_of_Solution'} \\lean{exists_Solution_of_Solution1} \\leanok \\uses{def:Solution1, def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_add_one_inv",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.eta_add_one_inv"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_add_one_inv} \\lean{Solution.eta_add_one_inv} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eq_one_or_neg_one_of_unit_of_congruent",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eq_one_or_neg_one_of_unit_of_congruent} \\lean{IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_z} \\lean{Solution.coprime_x_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_y} \\lean{Solution.lambda_not_dvd_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula1",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.formula1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula1} \\lean{Solution.formula1} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:by_kummer",
        "node_deps": [
          "def:Solution",
          "lmm:eq_one_or_neg_one_of_unit_of_congruent",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:formula2"
        ],
        "node_lean_decls": [
          "Solution.by_kummer"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:by_kummer} \\lean{Solution.by_kummer} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "23 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_cube_b_cube_same_congr",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_two"
        ],
        "node_lean_decls": [
          "a_cube_b_cube_same_congr"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_cube_b_cube_same_congr} \\lean{a_cube_b_cube_same_congr} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_a_add_eta_mul_b} \\lean{Solution.lambda_sq_not_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime",
          "lmm:eta_add_one_inv",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_dvd_a_add_b",
        "node_deps": [
          "def:Solution",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_z",
          "lmm:lambda_not_dvd_y",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_pow_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_dvd_a_add_b} \\lean{Solution.lambda_pow_dvd_a_add_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "64 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_y_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "cSolution.oprime_y_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_y_z} \\lean{cSolution.oprime_y_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.two_le_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1.two_le_multiplicity"
        ],
        "node_lean_decls": [
          "Solution.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.two_le_multiplicity} \\lean{Solution.two_le_multiplicity} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.lambda_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_ne_zero} \\lean{Solution.lambda_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_z} \\lean{Solution.lambda_not_dvd_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_or_dvd_or_dvd",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c",
          "lmm:cube_add_cube_eq_mul",
          "lmm:zeta_sub_one_prime1"
        ],
        "node_lean_decls": [
          "lambda_sq_dvd_or_dvd_or_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_or_dvd_or_dvd} \\lean{lambda_sq_dvd_or_dvd_or_dvd} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula2",
        "node_deps": [
          "def:Solution",
          "lmm:eta_isUnit",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_cube_eq_one",
          "lmm:formula1"
        ],
        "node_lean_decls": [
          "Solution.formula2"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula2} \\lean{Solution.formula2} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:final",
        "node_deps": [
          "def:Solution",
          "lmm:formula2",
          "lmm:by_kummer"
        ],
        "node_lean_decls": [
          "Solution.final"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:final} \\lean{Solution.final} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "29 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:ex_dvd_a_add_b",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_sq_dvd_or_dvd_or_dvd",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "ex_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:ex_dvd_a_add_b} \\lean{ex_dvd_a_add_b} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_w",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_w"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_w} \\lean{Solution.lambda_not_dvd_w} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "66 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.exists_minimal",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution.exists_minimal"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.exists_minimal} \\lean{Solution.exists_minimal} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_c_cube",
        "node_deps": [
          "def:Solution1",
          "lmm:a_cube_b_cube_same_congr"
        ],
        "node_lean_decls": [
          "lambda_pow_four_dvd_c_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_c_cube} \\lean{lambda_pow_four_dvd_c_cube} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_two_dvd_c",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_c_cube"
        ],
        "node_lean_decls": [
          "lambda_pow_two_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_two_dvd_c} \\lean{lambda_pow_two_dvd_c} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_add_eta_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.a_add_eta_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_add_eta_b} \\lean{Solution.a_add_eta_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_x",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_dvd_a_add_eta_mul_b",
          "lmm:lambda_dvd_a_add_eta_sq_mul_b",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_w",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_x"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_x} \\lean{Solution.lambda_not_dvd_x} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "0da58214a36fc7153acec1d0b8c286eb3a7f7a5b": {
    "date": "2024-04-08T08:00:23",
    "graph": [
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_of_Solution'",
        "node_deps": [
          "def:Solution1",
          "def:Solution",
          "lmm:ex_dvd_a_add_b"
        ],
        "node_lean_decls": [
          "exists_Solution_of_Solution1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_of_Solution'} \\lean{exists_Solution_of_Solution1} \\leanok \\uses{def:Solution1, def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "67 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_add_cube_eq_mul",
        "node_deps": [
          "def:Solution1",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "cube_add_cube_eq_mul"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_add_cube_eq_mul} \\lean{cube_add_cube_eq_mul} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_y_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "cSolution.oprime_y_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_y_z} \\lean{cSolution.oprime_y_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:by_kummer",
        "node_deps": [
          "def:Solution",
          "lmm:eq_one_or_neg_one_of_unit_of_congruent",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:formula2"
        ],
        "node_lean_decls": [
          "Solution.by_kummer"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:by_kummer} \\lean{Solution.by_kummer} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_multiplicity_lt",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.exists_Solution_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_multiplicity_lt} \\lean{Solution.exists_Solution_multiplicity_lt} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_y} \\lean{Solution.lambda_not_dvd_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eq_one_or_neg_one_of_unit_of_congruent",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eq_one_or_neg_one_of_unit_of_congruent} \\lean{IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "28 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.two_le_multiplicity",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c"
        ],
        "node_lean_decls": [
          "Solution'.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.two_le_multiplicity} \\lean{Solution'.two_le_multiplicity} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_a_add_eta_mul_b} \\lean{Solution.lambda_sq_not_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_add_one_inv",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.eta_add_one_inv"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_add_one_inv} \\lean{Solution.eta_add_one_inv} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_cube_b_cube_same_congr",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_two"
        ],
        "node_lean_decls": [
          "a_cube_b_cube_same_congr"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_cube_b_cube_same_congr} \\lean{a_cube_b_cube_same_congr} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:ex_dvd_a_add_b",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_sq_dvd_or_dvd_or_dvd",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "ex_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:ex_dvd_a_add_b} \\lean{ex_dvd_a_add_b} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.lambda_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_ne_zero} \\lean{Solution.lambda_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_add_eta_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.a_add_eta_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_add_eta_b} \\lean{Solution.a_add_eta_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "29 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_c_cube",
        "node_deps": [
          "def:Solution1",
          "lmm:a_cube_b_cube_same_congr"
        ],
        "node_lean_decls": [
          "lambda_pow_four_dvd_c_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_c_cube} \\lean{lambda_pow_four_dvd_c_cube} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.two_le_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1.two_le_multiplicity"
        ],
        "node_lean_decls": [
          "Solution.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.two_le_multiplicity} \\lean{Solution.two_le_multiplicity} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_z} \\lean{Solution.lambda_not_dvd_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula2",
        "node_deps": [
          "def:Solution",
          "lmm:eta_isUnit",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_cube_eq_one",
          "lmm:formula1"
        ],
        "node_lean_decls": [
          "Solution.formula2"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula2} \\lean{Solution.formula2} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_two_dvd_c",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_c_cube"
        ],
        "node_lean_decls": [
          "lambda_pow_two_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_two_dvd_c} \\lean{lambda_pow_two_dvd_c} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_w",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_w"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_w} \\lean{Solution.lambda_not_dvd_w} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_x",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_dvd_a_add_eta_mul_b",
          "lmm:lambda_dvd_a_add_eta_sq_mul_b",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_w",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_x"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_x} \\lean{Solution.lambda_not_dvd_x} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:final",
        "node_deps": [
          "def:Solution",
          "lmm:formula2",
          "lmm:by_kummer"
        ],
        "node_lean_decls": [
          "Solution.final"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:final} \\lean{Solution.final} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_dvd_a_add_b",
        "node_deps": [
          "def:Solution",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_z",
          "lmm:lambda_not_dvd_y",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_pow_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_dvd_a_add_b} \\lean{Solution.lambda_pow_dvd_a_add_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.exists_minimal",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution.exists_minimal"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.exists_minimal} \\lean{Solution.exists_minimal} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_or_dvd_or_dvd",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c",
          "lmm:cube_add_cube_eq_mul",
          "lmm:zeta_sub_one_prime1"
        ],
        "node_lean_decls": [
          "lambda_sq_dvd_or_dvd_or_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_or_dvd_or_dvd} \\lean{lambda_sq_dvd_or_dvd_or_dvd} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_z} \\lean{Solution.coprime_x_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "65 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime",
          "lmm:eta_add_one_inv",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula1",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.formula1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula1} \\lean{Solution.formula1} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "23 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "3f725f720e5f6a80d0e88405004cbc12d71c7046": {
    "date": "2024-04-08T08:01:17",
    "graph": [
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_cube_b_cube_same_congr",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_two"
        ],
        "node_lean_decls": [
          "a_cube_b_cube_same_congr"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_cube_b_cube_same_congr} \\lean{a_cube_b_cube_same_congr} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_add_one_inv",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.eta_add_one_inv"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_add_one_inv} \\lean{Solution.eta_add_one_inv} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_w",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_w"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_w} \\lean{Solution.lambda_not_dvd_w} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:by_kummer",
        "node_deps": [
          "def:Solution",
          "lmm:eq_one_or_neg_one_of_unit_of_congruent",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:formula2"
        ],
        "node_lean_decls": [
          "Solution.by_kummer"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:by_kummer} \\lean{Solution.by_kummer} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "28 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime",
          "lmm:eta_add_one_inv",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_dvd_a_add_b",
        "node_deps": [
          "def:Solution",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_z",
          "lmm:lambda_not_dvd_y",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_pow_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_dvd_a_add_b} \\lean{Solution.lambda_pow_dvd_a_add_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_z} \\lean{Solution.coprime_x_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_y_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "Solution.oprime_y_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_y_z} \\lean{Solution.oprime_y_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "65 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.two_le_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1.two_le_multiplicity"
        ],
        "node_lean_decls": [
          "Solution.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.two_le_multiplicity} \\lean{Solution.two_le_multiplicity} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_add_cube_eq_mul",
        "node_deps": [
          "def:Solution1",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "cube_add_cube_eq_mul"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_add_cube_eq_mul} \\lean{cube_add_cube_eq_mul} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_z} \\lean{Solution.lambda_not_dvd_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula2",
        "node_deps": [
          "def:Solution",
          "lmm:eta_isUnit",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_cube_eq_one",
          "lmm:formula1"
        ],
        "node_lean_decls": [
          "Solution.formula2"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula2} \\lean{Solution.formula2} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:final",
        "node_deps": [
          "def:Solution",
          "lmm:formula2",
          "lmm:by_kummer"
        ],
        "node_lean_decls": [
          "Solution.final"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:final} \\lean{Solution.final} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.exists_minimal",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution.exists_minimal"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.exists_minimal} \\lean{Solution.exists_minimal} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_two_dvd_c",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_c_cube"
        ],
        "node_lean_decls": [
          "lambda_pow_two_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_two_dvd_c} \\lean{lambda_pow_two_dvd_c} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_add_eta_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.a_add_eta_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_add_eta_b} \\lean{Solution.a_add_eta_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_a_add_eta_mul_b} \\lean{Solution.lambda_sq_not_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eq_one_or_neg_one_of_unit_of_congruent",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eq_one_or_neg_one_of_unit_of_congruent} \\lean{IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_c_cube",
        "node_deps": [
          "def:Solution1",
          "lmm:a_cube_b_cube_same_congr"
        ],
        "node_lean_decls": [
          "lambda_pow_four_dvd_c_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_c_cube} \\lean{lambda_pow_four_dvd_c_cube} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.two_le_multiplicity",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c"
        ],
        "node_lean_decls": [
          "Solution'.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.two_le_multiplicity} \\lean{Solution'.two_le_multiplicity} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_of_Solution'",
        "node_deps": [
          "def:Solution1",
          "def:Solution",
          "lmm:ex_dvd_a_add_b"
        ],
        "node_lean_decls": [
          "exists_Solution_of_Solution1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_of_Solution'} \\lean{exists_Solution_of_Solution1} \\leanok \\uses{def:Solution1, def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_y} \\lean{Solution.lambda_not_dvd_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "67 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "29 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:ex_dvd_a_add_b",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_sq_dvd_or_dvd_or_dvd",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "ex_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:ex_dvd_a_add_b} \\lean{ex_dvd_a_add_b} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_x",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_dvd_a_add_eta_mul_b",
          "lmm:lambda_dvd_a_add_eta_sq_mul_b",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_w",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_x"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_x} \\lean{Solution.lambda_not_dvd_x} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_or_dvd_or_dvd",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c",
          "lmm:cube_add_cube_eq_mul",
          "lmm:zeta_sub_one_prime1"
        ],
        "node_lean_decls": [
          "lambda_sq_dvd_or_dvd_or_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_or_dvd_or_dvd} \\lean{lambda_sq_dvd_or_dvd_or_dvd} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.lambda_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_ne_zero} \\lean{Solution.lambda_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula1",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.formula1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula1} \\lean{Solution.formula1} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "23 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_multiplicity_lt",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.exists_Solution_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_multiplicity_lt} \\lean{Solution.exists_Solution_multiplicity_lt} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "0f0da76527f6859de03fd65f2460940db977e0b4": {
    "date": "2024-04-08T08:13:01",
    "graph": [
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_add_cube_eq_mul",
        "node_deps": [
          "def:Solution1",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "cube_add_cube_eq_mul"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_add_cube_eq_mul} \\lean{cube_add_cube_eq_mul} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_or_dvd_or_dvd",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c",
          "lmm:cube_add_cube_eq_mul",
          "lmm:zeta_sub_one_prime1"
        ],
        "node_lean_decls": [
          "lambda_sq_dvd_or_dvd_or_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_or_dvd_or_dvd} \\lean{lambda_sq_dvd_or_dvd_or_dvd} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:ex_dvd_a_add_b",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_sq_dvd_or_dvd_or_dvd",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "ex_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:ex_dvd_a_add_b} \\lean{ex_dvd_a_add_b} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime",
          "lmm:eta_add_one_inv",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_y} \\lean{Solution.lambda_not_dvd_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_dvd_a_add_b",
        "node_deps": [
          "def:Solution",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_z",
          "lmm:lambda_not_dvd_y",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_pow_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_dvd_a_add_b} \\lean{Solution.lambda_pow_dvd_a_add_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity} \\lean{Solution'_final_multiplicity} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.exists_minimal",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution.exists_minimal"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.exists_minimal} \\lean{Solution.exists_minimal} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.two_le_multiplicity",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c"
        ],
        "node_lean_decls": [
          "Solution'.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.two_le_multiplicity} \\lean{Solution'.two_le_multiplicity} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_w",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_w"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_w} \\lean{Solution.lambda_not_dvd_w} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.two_le_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1.two_le_multiplicity"
        ],
        "node_lean_decls": [
          "Solution.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.two_le_multiplicity} \\lean{Solution.two_le_multiplicity} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_z} \\lean{Solution.coprime_x_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "67 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1_final_multiplicity"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity_lt} \\lean{Solution'_final_multiplicity_lt} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "28 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "29 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_of_Solution'",
        "node_deps": [
          "def:Solution1",
          "def:Solution",
          "lmm:ex_dvd_a_add_b"
        ],
        "node_lean_decls": [
          "exists_Solution_of_Solution1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_of_Solution'} \\lean{exists_Solution_of_Solution1} \\leanok \\uses{def:Solution1, def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_add_one_inv",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.eta_add_one_inv"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_add_one_inv} \\lean{Solution.eta_add_one_inv} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_cube_b_cube_same_congr",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_two"
        ],
        "node_lean_decls": [
          "a_cube_b_cube_same_congr"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_cube_b_cube_same_congr} \\lean{a_cube_b_cube_same_congr} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_x",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_dvd_a_add_eta_mul_b",
          "lmm:lambda_dvd_a_add_eta_sq_mul_b",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_w",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_x"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_x} \\lean{Solution.lambda_not_dvd_x} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula1",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.formula1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula1} \\lean{Solution.formula1} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eq_one_or_neg_one_of_unit_of_congruent",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eq_one_or_neg_one_of_unit_of_congruent} \\lean{IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "69 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_add_eta_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.a_add_eta_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_add_eta_b} \\lean{Solution.a_add_eta_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_c_cube",
        "node_deps": [
          "def:Solution1",
          "lmm:a_cube_b_cube_same_congr"
        ],
        "node_lean_decls": [
          "lambda_pow_four_dvd_c_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_c_cube} \\lean{lambda_pow_four_dvd_c_cube} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_two_dvd_c",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_c_cube"
        ],
        "node_lean_decls": [
          "lambda_pow_two_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_two_dvd_c} \\lean{lambda_pow_two_dvd_c} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_a_add_eta_mul_b} \\lean{Solution.lambda_sq_not_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_y_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "Solution.oprime_y_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_y_z} \\lean{Solution.oprime_y_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:by_kummer",
        "node_deps": [
          "def:Solution",
          "lmm:eq_one_or_neg_one_of_unit_of_congruent",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:formula2"
        ],
        "node_lean_decls": [
          "Solution.by_kummer"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:by_kummer} \\lean{Solution.by_kummer} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "23 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1_final_multiplicity_lt"
        ],
        "node_lean_decls": [
          "Solution.exists_Solution_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_multiplicity_lt} \\lean{Solution.exists_Solution_multiplicity_lt} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.lambda_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_ne_zero} \\lean{Solution.lambda_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_z} \\lean{Solution.lambda_not_dvd_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula2",
        "node_deps": [
          "def:Solution",
          "lmm:eta_isUnit",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_cube_eq_one",
          "lmm:formula1"
        ],
        "node_lean_decls": [
          "Solution.formula2"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula2} \\lean{Solution.formula2} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:final",
        "node_deps": [
          "def:Solution",
          "lmm:formula2",
          "lmm:by_kummer"
        ],
        "node_lean_decls": [
          "Solution.final"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:final} \\lean{Solution.final} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "0ad9188cdcea7cd1995f02cc3cecde61a2ab2e99": {
    "date": "2024-04-08T08:15:07",
    "graph": [
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_dvd_a_add_b",
        "node_deps": [
          "def:Solution",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_z",
          "lmm:lambda_not_dvd_y",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_pow_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_dvd_a_add_b} \\lean{Solution.lambda_pow_dvd_a_add_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_y_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "Solution.oprime_y_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_y_z} \\lean{Solution.oprime_y_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula1",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.formula1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula1} \\lean{Solution.formula1} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "28 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_cube_b_cube_same_congr",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_two"
        ],
        "node_lean_decls": [
          "a_cube_b_cube_same_congr"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_cube_b_cube_same_congr} \\lean{a_cube_b_cube_same_congr} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_add_eta_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.a_add_eta_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_add_eta_b} \\lean{Solution.a_add_eta_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_y} \\lean{Solution.lambda_not_dvd_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_of_Solution1",
        "node_deps": [
          "def:Solution1",
          "def:Solution",
          "lmm:ex_dvd_a_add_b"
        ],
        "node_lean_decls": [
          "exists_Solution_of_Solution1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_of_Solution1} \\lean{exists_Solution_of_Solution1} \\leanok \\uses{def:Solution1, def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1_final_multiplicity"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity_lt} \\lean{Solution'_final_multiplicity_lt} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula2",
        "node_deps": [
          "def:Solution",
          "lmm:eta_isUnit",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_cube_eq_one",
          "lmm:formula1"
        ],
        "node_lean_decls": [
          "Solution.formula2"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula2} \\lean{Solution.formula2} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_add_cube_eq_mul",
        "node_deps": [
          "def:Solution1",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "cube_add_cube_eq_mul"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_add_cube_eq_mul} \\lean{cube_add_cube_eq_mul} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_or_dvd_or_dvd",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c",
          "lmm:cube_add_cube_eq_mul",
          "lmm:zeta_sub_one_prime1"
        ],
        "node_lean_decls": [
          "lambda_sq_dvd_or_dvd_or_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_or_dvd_or_dvd} \\lean{lambda_sq_dvd_or_dvd_or_dvd} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_add_one_inv",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.eta_add_one_inv"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_add_one_inv} \\lean{Solution.eta_add_one_inv} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:by_kummer",
        "node_deps": [
          "def:Solution",
          "lmm:eq_one_or_neg_one_of_unit_of_congruent",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:formula2"
        ],
        "node_lean_decls": [
          "Solution.by_kummer"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:by_kummer} \\lean{Solution.by_kummer} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "23 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_c_cube",
        "node_deps": [
          "def:Solution1",
          "lmm:a_cube_b_cube_same_congr"
        ],
        "node_lean_decls": [
          "lambda_pow_four_dvd_c_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_c_cube} \\lean{lambda_pow_four_dvd_c_cube} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.two_le_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1.two_le_multiplicity"
        ],
        "node_lean_decls": [
          "Solution.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.two_le_multiplicity} \\lean{Solution.two_le_multiplicity} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:ex_dvd_a_add_b",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_sq_dvd_or_dvd_or_dvd",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "ex_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:ex_dvd_a_add_b} \\lean{ex_dvd_a_add_b} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.lambda_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_ne_zero} \\lean{Solution.lambda_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_a_add_eta_mul_b} \\lean{Solution.lambda_sq_not_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_z} \\lean{Solution.lambda_not_dvd_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_w",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_w"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_w} \\lean{Solution.lambda_not_dvd_w} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity} \\lean{Solution'_final_multiplicity} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:final",
        "node_deps": [
          "def:Solution",
          "lmm:formula2",
          "lmm:by_kummer"
        ],
        "node_lean_decls": [
          "Solution.final"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:final} \\lean{Solution.final} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eq_one_or_neg_one_of_unit_of_congruent",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eq_one_or_neg_one_of_unit_of_congruent} \\lean{IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "29 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_two_dvd_c",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_c_cube"
        ],
        "node_lean_decls": [
          "lambda_pow_two_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_two_dvd_c} \\lean{lambda_pow_two_dvd_c} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.two_le_multiplicity",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c"
        ],
        "node_lean_decls": [
          "Solution'.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.two_le_multiplicity} \\lean{Solution'.two_le_multiplicity} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime",
          "lmm:eta_add_one_inv",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "lmm:exists_Solution_of_Solution1",
          "lmm:Solution1_final_multiplicity_lt"
        ],
        "node_lean_decls": [
          "Solution.exists_Solution_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_multiplicity_lt} \\lean{Solution.exists_Solution_multiplicity_lt} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_z} \\lean{Solution.coprime_x_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_minimal",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution.exists_minimal"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_minimal} \\lean{Solution.exists_minimal} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_x",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_dvd_a_add_eta_mul_b",
          "lmm:lambda_dvd_a_add_eta_sq_mul_b",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_w",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_x"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_x} \\lean{Solution.lambda_not_dvd_x} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "69 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "67 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "d9592bb8f1caaba13a714db69c6d3c3edce13d32": {
    "date": "2024-04-08T08:15:56",
    "graph": [
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "29 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eq_one_or_neg_one_of_unit_of_congruent",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eq_one_or_neg_one_of_unit_of_congruent} \\lean{IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "lmm:exists_Solution_of_Solution1",
          "lmm:Solution1_final_multiplicity_lt"
        ],
        "node_lean_decls": [
          "Solution.exists_Solution_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_multiplicity_lt} \\lean{Solution.exists_Solution_multiplicity_lt} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "67 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_minimal",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution.exists_minimal"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_minimal} \\lean{Solution.exists_minimal} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_c_cube",
        "node_deps": [
          "def:Solution1",
          "lmm:a_cube_b_cube_same_congr"
        ],
        "node_lean_decls": [
          "lambda_pow_four_dvd_c_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_c_cube} \\lean{lambda_pow_four_dvd_c_cube} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_y_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "Solution.oprime_y_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_y_z} \\lean{Solution.oprime_y_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "28 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_cube_b_cube_same_congr",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_two"
        ],
        "node_lean_decls": [
          "a_cube_b_cube_same_congr"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_cube_b_cube_same_congr} \\lean{a_cube_b_cube_same_congr} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.two_le_multiplicity",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c"
        ],
        "node_lean_decls": [
          "Solution'.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.two_le_multiplicity} \\lean{Solution'.two_le_multiplicity} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.two_le_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1.two_le_multiplicity"
        ],
        "node_lean_decls": [
          "Solution.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.two_le_multiplicity} \\lean{Solution.two_le_multiplicity} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_of_Solution1",
        "node_deps": [
          "def:Solution1",
          "def:Solution",
          "lmm:ex_dvd_a_add_b"
        ],
        "node_lean_decls": [
          "exists_Solution_of_Solution1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_of_Solution1} \\lean{exists_Solution_of_Solution1} \\leanok \\uses{def:Solution1, def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula1",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.formula1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula1} \\lean{Solution.formula1} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula2",
        "node_deps": [
          "def:Solution",
          "lmm:eta_isUnit",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_cube_eq_one",
          "lmm:formula1"
        ],
        "node_lean_decls": [
          "Solution.formula2"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula2} \\lean{Solution.formula2} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1_final_multiplicity"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity_lt} \\lean{Solution'_final_multiplicity_lt} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_or_dvd_or_dvd",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c",
          "lmm:cube_add_cube_eq_mul",
          "lmm:zeta_sub_one_prime1"
        ],
        "node_lean_decls": [
          "lambda_sq_dvd_or_dvd_or_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_or_dvd_or_dvd} \\lean{lambda_sq_dvd_or_dvd_or_dvd} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_add_eta_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.a_add_eta_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_add_eta_b} \\lean{Solution.a_add_eta_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:final",
        "node_deps": [
          "def:Solution",
          "lmm:formula2",
          "lmm:by_kummer"
        ],
        "node_lean_decls": [
          "Solution.final"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:final} \\lean{Solution.final} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity} \\lean{Solution'_final_multiplicity} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime",
          "lmm:eta_add_one_inv",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_w",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_w"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_w} \\lean{Solution.lambda_not_dvd_w} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_two_dvd_c",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_c_cube"
        ],
        "node_lean_decls": [
          "lambda_pow_two_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_two_dvd_c} \\lean{lambda_pow_two_dvd_c} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:ex_dvd_a_add_b",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_sq_dvd_or_dvd_or_dvd",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "ex_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:ex_dvd_a_add_b} \\lean{ex_dvd_a_add_b} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_y} \\lean{Solution.lambda_not_dvd_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "23 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_add_cube_eq_mul",
        "node_deps": [
          "def:Solution1",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "cube_add_cube_eq_mul"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_add_cube_eq_mul} \\lean{cube_add_cube_eq_mul} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.lambda_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_ne_zero} \\lean{Solution.lambda_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_a_add_eta_mul_b} \\lean{Solution.lambda_sq_not_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_add_one_inv",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.eta_add_one_inv"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_add_one_inv} \\lean{Solution.eta_add_one_inv} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_dvd_a_add_b",
        "node_deps": [
          "def:Solution",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_z",
          "lmm:lambda_not_dvd_y",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_pow_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_dvd_a_add_b} \\lean{Solution.lambda_pow_dvd_a_add_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_z} \\lean{Solution.lambda_not_dvd_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_x",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_dvd_a_add_eta_mul_b",
          "lmm:lambda_dvd_a_add_eta_sq_mul_b",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_w",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_x"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_x} \\lean{Solution.lambda_not_dvd_x} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_z} \\lean{Solution.coprime_x_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:by_kummer",
        "node_deps": [
          "def:Solution",
          "lmm:eq_one_or_neg_one_of_unit_of_congruent",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:formula2"
        ],
        "node_lean_decls": [
          "Solution.by_kummer"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:by_kummer} \\lean{Solution.by_kummer} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "69 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "686eaa6feee2df9beebc47e5441fe476521df8b9": {
    "date": "2024-04-08T08:18:45",
    "graph": [
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_add_eta_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.a_add_eta_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_add_eta_b} \\lean{Solution.a_add_eta_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_a_add_eta_mul_b} \\lean{Solution.lambda_sq_not_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "lmm:exists_Solution_of_Solution1",
          "lmm:Solution1_final_multiplicity_lt"
        ],
        "node_lean_decls": [
          "Solution.exists_Solution_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_multiplicity_lt} \\lean{Solution.exists_Solution_multiplicity_lt} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "70 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "28 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.two_le_multiplicity",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c"
        ],
        "node_lean_decls": [
          "Solution'.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.two_le_multiplicity} \\lean{Solution'.two_le_multiplicity} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.two_le_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1.two_le_multiplicity"
        ],
        "node_lean_decls": [
          "Solution.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.two_le_multiplicity} \\lean{Solution.two_le_multiplicity} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_add_cube_eq_mul",
        "node_deps": [
          "def:Solution1",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "cube_add_cube_eq_mul"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_add_cube_eq_mul} \\lean{cube_add_cube_eq_mul} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_or_dvd_or_dvd",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c",
          "lmm:cube_add_cube_eq_mul",
          "lmm:zeta_sub_one_prime1"
        ],
        "node_lean_decls": [
          "lambda_sq_dvd_or_dvd_or_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_or_dvd_or_dvd} \\lean{lambda_sq_dvd_or_dvd_or_dvd} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_of_Solution1",
        "node_deps": [
          "def:Solution1",
          "def:Solution",
          "lmm:ex_dvd_a_add_b"
        ],
        "node_lean_decls": [
          "exists_Solution_of_Solution1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_of_Solution1} \\lean{exists_Solution_of_Solution1} \\leanok \\uses{def:Solution1, def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:by_kummer",
        "node_deps": [
          "def:Solution",
          "lmm:eq_one_or_neg_one_of_unit_of_congruent",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:formula2"
        ],
        "node_lean_decls": [
          "Solution.by_kummer"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:by_kummer} \\lean{Solution.by_kummer} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.lambda_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_ne_zero} \\lean{Solution.lambda_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_y} \\lean{Solution.lambda_not_dvd_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eq_one_or_neg_one_of_unit_of_congruent",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eq_one_or_neg_one_of_unit_of_congruent} \\lean{IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_minimal",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution.exists_minimal"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_minimal} \\lean{Solution.exists_minimal} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_x",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_dvd_a_add_eta_mul_b",
          "lmm:lambda_dvd_a_add_eta_sq_mul_b",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_w",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_x"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_x} \\lean{Solution.lambda_not_dvd_x} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_z} \\lean{Solution.coprime_x_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "23 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_c_cube",
        "node_deps": [
          "def:Solution1",
          "lmm:a_cube_b_cube_same_congr"
        ],
        "node_lean_decls": [
          "lambda_pow_four_dvd_c_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_c_cube} \\lean{lambda_pow_four_dvd_c_cube} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula1",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.formula1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula1} \\lean{Solution.formula1} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "68 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1_final",
        "node_deps": [
          "def:Solution1"
        ],
        "node_lean_decls": [
          "Solution'_final"
        ],
        "node_name": "thmenv",
        "node_title": "Final Solution\u2019",
        "node_source": "\\begin{thmenv}[Final Solution'] \\label{def:Solution1_final} \\lean{Solution'_final} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "64 Final Solution\u2019",
        "node_text_content": "    ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:ex_dvd_a_add_b",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_sq_dvd_or_dvd_or_dvd",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "ex_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:ex_dvd_a_add_b} \\lean{ex_dvd_a_add_b} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_add_one_inv",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.eta_add_one_inv"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_add_one_inv} \\lean{Solution.eta_add_one_inv} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_w",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_w"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_w} \\lean{Solution.lambda_not_dvd_w} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:final",
        "node_deps": [
          "def:Solution",
          "lmm:formula2",
          "lmm:by_kummer"
        ],
        "node_lean_decls": [
          "Solution.final"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:final} \\lean{Solution.final} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "def:Solution1_final",
          "lmm:Solution1_final_multiplicity"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity_lt} \\lean{Solution'_final_multiplicity_lt} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "29 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_cube_b_cube_same_congr",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_two"
        ],
        "node_lean_decls": [
          "a_cube_b_cube_same_congr"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_cube_b_cube_same_congr} \\lean{a_cube_b_cube_same_congr} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_two_dvd_c",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_c_cube"
        ],
        "node_lean_decls": [
          "lambda_pow_two_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_two_dvd_c} \\lean{lambda_pow_two_dvd_c} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime",
          "lmm:eta_add_one_inv",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_dvd_a_add_b",
        "node_deps": [
          "def:Solution",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_z",
          "lmm:lambda_not_dvd_y",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_pow_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_dvd_a_add_b} \\lean{Solution.lambda_pow_dvd_a_add_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_y_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "Solution.oprime_y_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_y_z} \\lean{Solution.oprime_y_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity",
        "node_deps": [
          "def:Solution",
          "def:Solution1_final",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity} \\lean{Solution'_final_multiplicity} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_z} \\lean{Solution.lambda_not_dvd_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula2",
        "node_deps": [
          "def:Solution",
          "lmm:eta_isUnit",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_cube_eq_one",
          "lmm:formula1"
        ],
        "node_lean_decls": [
          "Solution.formula2"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula2} \\lean{Solution.formula2} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "d07c37cc69ffcd35a5c66e56618aa8bfcb67bfa0": {
    "date": "2024-04-08T08:20:42",
    "graph": [
      {
        "id": "def:Solution1_final",
        "node_deps": [
          "def:Solution1",
          "lmm:final"
        ],
        "node_lean_decls": [
          "Solution'_final"
        ],
        "node_name": "thmenv",
        "node_title": "Final Solution\u2019",
        "node_source": "\\begin{thmenv}[Final Solution'] \\label{def:Solution1_final} \\lean{Solution'_final} \\leanok \\uses{def:Solution1, lmm:two_le_multiplicity, lmm:final} \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "64 Final Solution\u2019",
        "node_text_content": "    ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_minimal",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution.exists_minimal"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_minimal} \\lean{Solution.exists_minimal} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_c_cube",
        "node_deps": [
          "def:Solution1",
          "lmm:a_cube_b_cube_same_congr"
        ],
        "node_lean_decls": [
          "lambda_pow_four_dvd_c_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_c_cube} \\lean{lambda_pow_four_dvd_c_cube} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_two_dvd_c",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_c_cube"
        ],
        "node_lean_decls": [
          "lambda_pow_two_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_two_dvd_c} \\lean{lambda_pow_two_dvd_c} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_dvd_a_add_b",
        "node_deps": [
          "def:Solution",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_z",
          "lmm:lambda_not_dvd_y",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_pow_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_dvd_a_add_b} \\lean{Solution.lambda_pow_dvd_a_add_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_z} \\lean{Solution.coprime_x_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:final",
        "node_deps": [
          "def:Solution",
          "lmm:formula2",
          "lmm:by_kummer"
        ],
        "node_lean_decls": [
          "Solution.final"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:final} \\lean{Solution.final} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "def:Solution1_final",
          "lmm:Solution1_final_multiplicity"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity_lt} \\lean{Solution'_final_multiplicity_lt} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "28 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "29 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.two_le_multiplicity",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c"
        ],
        "node_lean_decls": [
          "Solution'.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.two_le_multiplicity} \\lean{Solution'.two_le_multiplicity} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_of_Solution1",
        "node_deps": [
          "def:Solution1",
          "def:Solution",
          "lmm:ex_dvd_a_add_b"
        ],
        "node_lean_decls": [
          "exists_Solution_of_Solution1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_of_Solution1} \\lean{exists_Solution_of_Solution1} \\leanok \\uses{def:Solution1, def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_add_one_inv",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.eta_add_one_inv"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_add_one_inv} \\lean{Solution.eta_add_one_inv} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_or_dvd_or_dvd",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c",
          "lmm:cube_add_cube_eq_mul",
          "lmm:zeta_sub_one_prime1"
        ],
        "node_lean_decls": [
          "lambda_sq_dvd_or_dvd_or_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_or_dvd_or_dvd} \\lean{lambda_sq_dvd_or_dvd_or_dvd} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "23 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "70 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "68 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:ex_dvd_a_add_b",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_sq_dvd_or_dvd_or_dvd",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "ex_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:ex_dvd_a_add_b} \\lean{ex_dvd_a_add_b} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_a_add_eta_mul_b} \\lean{Solution.lambda_sq_not_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime",
          "lmm:eta_add_one_inv",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:by_kummer",
        "node_deps": [
          "def:Solution",
          "lmm:eq_one_or_neg_one_of_unit_of_congruent",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:formula2"
        ],
        "node_lean_decls": [
          "Solution.by_kummer"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:by_kummer} \\lean{Solution.by_kummer} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.two_le_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1.two_le_multiplicity"
        ],
        "node_lean_decls": [
          "Solution.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.two_le_multiplicity} \\lean{Solution.two_le_multiplicity} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.lambda_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_ne_zero} \\lean{Solution.lambda_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_add_eta_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.a_add_eta_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_add_eta_b} \\lean{Solution.a_add_eta_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula1",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.formula1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula1} \\lean{Solution.formula1} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "lmm:exists_Solution_of_Solution1",
          "lmm:Solution1_final_multiplicity_lt"
        ],
        "node_lean_decls": [
          "Solution.exists_Solution_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_multiplicity_lt} \\lean{Solution.exists_Solution_multiplicity_lt} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_cube_b_cube_same_congr",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_two"
        ],
        "node_lean_decls": [
          "a_cube_b_cube_same_congr"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_cube_b_cube_same_congr} \\lean{a_cube_b_cube_same_congr} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_add_cube_eq_mul",
        "node_deps": [
          "def:Solution1",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "cube_add_cube_eq_mul"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_add_cube_eq_mul} \\lean{cube_add_cube_eq_mul} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_y} \\lean{Solution.lambda_not_dvd_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_z} \\lean{Solution.lambda_not_dvd_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_w",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_w"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_w} \\lean{Solution.lambda_not_dvd_w} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_y_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "Solution.oprime_y_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_y_z} \\lean{Solution.oprime_y_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity",
        "node_deps": [
          "def:Solution",
          "def:Solution1_final",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity} \\lean{Solution'_final_multiplicity} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eq_one_or_neg_one_of_unit_of_congruent",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eq_one_or_neg_one_of_unit_of_congruent} \\lean{IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_x",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_dvd_a_add_eta_mul_b",
          "lmm:lambda_dvd_a_add_eta_sq_mul_b",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_w",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_x"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_x} \\lean{Solution.lambda_not_dvd_x} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula2",
        "node_deps": [
          "def:Solution",
          "lmm:eta_isUnit",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_cube_eq_one",
          "lmm:formula1"
        ],
        "node_lean_decls": [
          "Solution.formula2"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula2} \\lean{Solution.formula2} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "0d06a4d14ccc0d9258a55f762902bbf4ed02b05e": {
    "date": "2024-04-08T08:30:46",
    "graph": [
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "29 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_cube_b_cube_same_congr",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_two"
        ],
        "node_lean_decls": [
          "a_cube_b_cube_same_congr"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_cube_b_cube_same_congr} \\lean{a_cube_b_cube_same_congr} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_c_cube",
        "node_deps": [
          "def:Solution1",
          "lmm:a_cube_b_cube_same_congr"
        ],
        "node_lean_decls": [
          "lambda_pow_four_dvd_c_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_c_cube} \\lean{lambda_pow_four_dvd_c_cube} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_a_add_eta_mul_b} \\lean{Solution.lambda_sq_not_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:by_kummer",
        "node_deps": [
          "def:Solution",
          "lmm:eq_one_or_neg_one_of_unit_of_congruent",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:formula2"
        ],
        "node_lean_decls": [
          "Solution.by_kummer"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:by_kummer} \\lean{Solution.by_kummer} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:final",
        "node_deps": [
          "def:Solution",
          "lmm:formula2",
          "lmm:by_kummer"
        ],
        "node_lean_decls": [
          "Solution.final"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:final} \\lean{Solution.final} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "70 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_z} \\lean{Solution.coprime_x_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_add_cube_eq_mul",
        "node_deps": [
          "def:Solution1",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "cube_add_cube_eq_mul"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_add_cube_eq_mul} \\lean{cube_add_cube_eq_mul} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_or_dvd_or_dvd",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c",
          "lmm:cube_add_cube_eq_mul",
          "lmm:zeta_sub_one_prime1"
        ],
        "node_lean_decls": [
          "lambda_sq_dvd_or_dvd_or_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_or_dvd_or_dvd} \\lean{lambda_sq_dvd_or_dvd_or_dvd} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:ex_dvd_a_add_b",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_sq_dvd_or_dvd_or_dvd",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "ex_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:ex_dvd_a_add_b} \\lean{ex_dvd_a_add_b} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.lambda_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_ne_zero} \\lean{Solution.lambda_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime",
          "lmm:eta_add_one_inv",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_z} \\lean{Solution.lambda_not_dvd_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_x",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_dvd_a_add_eta_mul_b",
          "lmm:lambda_dvd_a_add_eta_sq_mul_b",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_w",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_x"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_x} \\lean{Solution.lambda_not_dvd_x} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.two_le_multiplicity",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c"
        ],
        "node_lean_decls": [
          "Solution'.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.two_le_multiplicity} \\lean{Solution'.two_le_multiplicity} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_of_Solution1",
        "node_deps": [
          "def:Solution1",
          "def:Solution",
          "lmm:ex_dvd_a_add_b"
        ],
        "node_lean_decls": [
          "exists_Solution_of_Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_of_Solution1} \\lean{exists_Solution_of_Solution'} \\leanok \\uses{def:Solution1, def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_dvd_a_add_b",
        "node_deps": [
          "def:Solution",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_z",
          "lmm:lambda_not_dvd_y",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_pow_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_dvd_a_add_b} \\lean{Solution.lambda_pow_dvd_a_add_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_y_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "Solution.coprime_y_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_y_z} \\lean{Solution.coprime_y_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1_final",
        "node_deps": [
          "def:Solution1",
          "lmm:final"
        ],
        "node_lean_decls": [
          "Solution'_final"
        ],
        "node_name": "thmenv",
        "node_title": "Final Solution\u2019",
        "node_source": "\\begin{thmenv}[Final Solution'] \\label{def:Solution1_final} \\lean{Solution'_final} \\leanok \\uses{def:Solution1, lmm:two_le_multiplicity, lmm:final} \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "64 Final Solution\u2019",
        "node_text_content": "    ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_two_dvd_c",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_c_cube"
        ],
        "node_lean_decls": [
          "lambda_pow_two_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_two_dvd_c} \\lean{lambda_pow_two_dvd_c} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_y} \\lean{Solution.lambda_not_dvd_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula1",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.formula1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula1} \\lean{Solution.formula1} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula2",
        "node_deps": [
          "def:Solution",
          "lmm:eta_isUnit",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_cube_eq_one",
          "lmm:formula1"
        ],
        "node_lean_decls": [
          "Solution.formula2"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula2} \\lean{Solution.formula2} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity",
        "node_deps": [
          "def:Solution",
          "def:Solution1_final",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity} \\lean{Solution'_final_multiplicity} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "68 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_minimal",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution.exists_minimal"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_minimal} \\lean{Solution.exists_minimal} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_w",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_w"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_w} \\lean{Solution.lambda_not_dvd_w} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "def:Solution1_final",
          "lmm:Solution1_final_multiplicity"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity_lt} \\lean{Solution'_final_multiplicity_lt} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "23 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "lmm:exists_Solution_of_Solution1",
          "lmm:Solution1_final_multiplicity_lt"
        ],
        "node_lean_decls": [
          "Solution.exists_Solution_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_multiplicity_lt} \\lean{Solution.exists_Solution_multiplicity_lt} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "28 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.two_le_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1.two_le_multiplicity"
        ],
        "node_lean_decls": [
          "Solution.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.two_le_multiplicity} \\lean{Solution.two_le_multiplicity} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_add_eta_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.a_add_eta_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_add_eta_b} \\lean{Solution.a_add_eta_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_add_one_inv",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.eta_add_one_inv"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_add_one_inv} \\lean{Solution.eta_add_one_inv} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eq_one_or_neg_one_of_unit_of_congruent",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eq_one_or_neg_one_of_unit_of_congruent} \\lean{IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "df9abdf3aaef9468da160c56c8ab022e64ef3faa": {
    "date": "2024-04-08T09:03:12",
    "graph": [
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "28 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_two_dvd_c",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_c_cube"
        ],
        "node_lean_decls": [
          "lambda_pow_two_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_two_dvd_c} \\lean{lambda_pow_two_dvd_c} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_add_cube_eq_mul",
        "node_deps": [
          "def:Solution1",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "cube_add_cube_eq_mul"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_add_cube_eq_mul} \\lean{cube_add_cube_eq_mul} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_add_one_inv",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.eta_add_one_inv"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_add_one_inv} \\lean{Solution.eta_add_one_inv} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime",
          "lmm:eta_add_one_inv",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "lmm:exists_Solution_of_Solution1",
          "lmm:Solution1_final_multiplicity_lt"
        ],
        "node_lean_decls": [
          "Solution.exists_Solution_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_multiplicity_lt} \\lean{Solution.exists_Solution_multiplicity_lt} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.lambda_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_ne_zero} \\lean{Solution.lambda_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:by_kummer",
        "node_deps": [
          "def:Solution",
          "lmm:eq_one_or_neg_one_of_unit_of_congruent",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:formula2"
        ],
        "node_lean_decls": [
          "Solution.by_kummer"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:by_kummer} \\lean{Solution.by_kummer} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula1",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.formula1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula1} \\lean{Solution.formula1} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_z} \\lean{Solution.lambda_not_dvd_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity",
        "node_deps": [
          "def:Solution",
          "def:Solution1_final",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity} \\lean{Solution'_final_multiplicity} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eq_one_or_neg_one_of_unit_of_congruent",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eq_one_or_neg_one_of_unit_of_congruent} \\lean{IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "23 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_minimal",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution.exists_minimal"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_minimal} \\lean{Solution.exists_minimal} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_cube_b_cube_same_congr",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_two"
        ],
        "node_lean_decls": [
          "a_cube_b_cube_same_congr"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_cube_b_cube_same_congr} \\lean{a_cube_b_cube_same_congr} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_w",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_w"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_w} \\lean{Solution.lambda_not_dvd_w} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_z} \\lean{Solution.coprime_x_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "68 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "70 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:final",
        "node_deps": [
          "def:Solution",
          "lmm:formula2",
          "lmm:by_kummer"
        ],
        "node_lean_decls": [
          "Solution.final"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:final} \\lean{Solution.final} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "29 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_y} \\lean{Solution.lambda_not_dvd_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_dvd_a_add_b",
        "node_deps": [
          "def:Solution",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_z",
          "lmm:lambda_not_dvd_y",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_pow_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_dvd_a_add_b} \\lean{Solution.lambda_pow_dvd_a_add_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1_final",
        "node_deps": [
          "def:Solution1",
          "lmm:final"
        ],
        "node_lean_decls": [
          "Solution'_final"
        ],
        "node_name": "thmenv",
        "node_title": "Final Solution\u2019",
        "node_source": "\\begin{thmenv}[Final Solution'] \\label{def:Solution1_final} \\lean{Solution'_final} \\leanok \\uses{def:Solution1, lmm:two_le_multiplicity, lmm:final} \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "64 Final Solution\u2019",
        "node_text_content": "    ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.two_le_multiplicity",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c"
        ],
        "node_lean_decls": [
          "Solution'.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.two_le_multiplicity} \\lean{Solution'.two_le_multiplicity} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.two_le_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1.two_le_multiplicity"
        ],
        "node_lean_decls": [
          "Solution.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.two_le_multiplicity} \\lean{Solution.two_le_multiplicity} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_or_dvd_or_dvd",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c",
          "lmm:cube_add_cube_eq_mul",
          "lmm:zeta_sub_one_prime1"
        ],
        "node_lean_decls": [
          "lambda_sq_dvd_or_dvd_or_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_or_dvd_or_dvd} \\lean{lambda_sq_dvd_or_dvd_or_dvd} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:ex_dvd_a_add_b",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_sq_dvd_or_dvd_or_dvd",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "ex_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:ex_dvd_a_add_b} \\lean{ex_dvd_a_add_b} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_a_add_eta_mul_b} \\lean{Solution.lambda_sq_not_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_x",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_dvd_a_add_eta_mul_b",
          "lmm:lambda_dvd_a_add_eta_sq_mul_b",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_w",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_x"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_x} \\lean{Solution.lambda_not_dvd_x} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_c_cube",
        "node_deps": [
          "def:Solution1",
          "lmm:a_cube_b_cube_same_congr"
        ],
        "node_lean_decls": [
          "lambda_pow_four_dvd_c_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_c_cube} \\lean{lambda_pow_four_dvd_c_cube} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_of_Solution1",
        "node_deps": [
          "def:Solution1",
          "def:Solution",
          "lmm:ex_dvd_a_add_b"
        ],
        "node_lean_decls": [
          "exists_Solution_of_Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_of_Solution1} \\lean{exists_Solution_of_Solution'} \\leanok \\uses{def:Solution1, def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_add_eta_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.a_add_eta_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_add_eta_b} \\lean{Solution.a_add_eta_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_y_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "Solution.coprime_y_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_y_z} \\lean{Solution.coprime_y_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula2",
        "node_deps": [
          "def:Solution",
          "lmm:eta_isUnit",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_cube_eq_one",
          "lmm:formula1"
        ],
        "node_lean_decls": [
          "Solution.formula2"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula2} \\lean{Solution.formula2} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "def:Solution1_final",
          "lmm:Solution1_final_multiplicity"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity_lt} \\lean{Solution'_final_multiplicity_lt} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "dbba1be518ad043c5e73386458fc2c89806efc2a": {
    "date": "2024-04-08T12:54:20",
    "graph": [
      {
        "id": "lmm:lambda_sq_not_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_a_add_eta_mul_b} \\lean{Solution.lambda_sq_not_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_add_cube_eq_mul",
        "node_deps": [
          "def:Solution1",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "cube_add_cube_eq_mul"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_add_cube_eq_mul} \\lean{cube_add_cube_eq_mul} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime",
          "lmm:eta_add_one_inv",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:cube_add_cube_eq_mul"
        ],
        "node_lean_decls": [
          "Solution.x_mul_y_mul_z_eq_u_w_pow_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:x_mul_y_mul_z_eq_u_w_pow_three} \\lean{Solution.x_mul_y_mul_z_eq_u_w_pow_three} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula2",
        "node_deps": [
          "def:Solution",
          "lmm:eta_isUnit",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_cube_eq_one",
          "lmm:formula1"
        ],
        "node_lean_decls": [
          "Solution.formula2"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula2} \\lean{Solution.formula2} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_c_cube",
        "node_deps": [
          "def:Solution1",
          "lmm:a_cube_b_cube_same_congr"
        ],
        "node_lean_decls": [
          "lambda_pow_four_dvd_c_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_c_cube} \\lean{lambda_pow_four_dvd_c_cube} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_of_Solution1",
        "node_deps": [
          "def:Solution1",
          "def:Solution",
          "lmm:ex_dvd_a_add_b"
        ],
        "node_lean_decls": [
          "exists_Solution_of_Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_of_Solution1} \\lean{exists_Solution_of_Solution'} \\leanok \\uses{def:Solution1, def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:mult_minus_two_plus_one_plus_one",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.mult_minus_two_plus_one_plus_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:mult_minus_two_plus_one_plus_one} \\lean{Solution.mult_minus_two_plus_one_plus_one} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eq_one_or_neg_one_of_unit_of_congruent",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eq_one_or_neg_one_of_unit_of_congruent} \\lean{IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_two_dvd_c",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_c_cube"
        ],
        "node_lean_decls": [
          "lambda_pow_two_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_two_dvd_c} \\lean{lambda_pow_two_dvd_c} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_add_one_inv",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.eta_add_one_inv"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_add_one_inv} \\lean{Solution.eta_add_one_inv} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "lmm:exists_Solution_of_Solution1",
          "lmm:Solution1_final_multiplicity_lt"
        ],
        "node_lean_decls": [
          "Solution.exists_Solution_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_multiplicity_lt} \\lean{Solution.exists_Solution_multiplicity_lt} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:x_eq_unit_mul_cube",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
          "lmm:coprime_x_y",
          "lmm:coprime_x_z"
        ],
        "node_lean_decls": [
          "Solution.x_eq_unit_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:x_eq_unit_mul_cube} \\lean{Solution.x_eq_unit_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.lambda_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_ne_zero} \\lean{Solution.lambda_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:final",
        "node_deps": [
          "def:Solution",
          "lmm:formula2",
          "lmm:by_kummer"
        ],
        "node_lean_decls": [
          "Solution.final"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:final} \\lean{Solution.final} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_z} \\lean{Solution.coprime_x_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "82 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_dvd_a_add_b",
        "node_deps": [
          "def:Solution",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_z",
          "lmm:lambda_not_dvd_y",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_pow_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_dvd_a_add_b} \\lean{Solution.lambda_pow_dvd_a_add_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "29 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "def:Solution1_final",
          "lmm:Solution1_final_multiplicity"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity_lt} \\lean{Solution'_final_multiplicity_lt} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_u_mul_cube",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_dvd_u_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_u_mul_cube} \\lean{Solution.lambda_sq_dvd_u_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity",
        "node_deps": [
          "def:Solution",
          "def:Solution1_final",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity} \\lean{Solution'_final_multiplicity} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:z_eq_unit_mul_cube",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
          "lmm:coprime_x_z",
          "lmm:coprime_y_z"
        ],
        "node_lean_decls": [
          "Solution.z_eq_unit_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:z_eq_unit_mul_cube} \\lean{Solution.z_eq_unit_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:ex_dvd_a_add_b",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_sq_dvd_or_dvd_or_dvd",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "ex_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:ex_dvd_a_add_b} \\lean{ex_dvd_a_add_b} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_Y_Z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_Z",
          "lmm:coprime_y_z"
        ],
        "node_lean_decls": [
          "Solution.coprime_Y_Z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_Y_Z} \\lean{Solution.coprime_Y_Z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_Y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_Y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_Y} \\lean{Solution.lambda_not_dvd_Y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_cube_b_cube_same_congr",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_two"
        ],
        "node_lean_decls": [
          "a_cube_b_cube_same_congr"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_cube_b_cube_same_congr} \\lean{a_cube_b_cube_same_congr} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_y} \\lean{Solution.lambda_not_dvd_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_w",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_w"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_w} \\lean{Solution.lambda_not_dvd_w} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:span_x_mul_span_y_mul_span_z",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three"
        ],
        "node_lean_decls": [
          "Solution.span_x_mul_span_y_mul_span_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:span_x_mul_span_y_mul_span_z} \\lean{Solution.span_x_mul_span_y_mul_span_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_or_dvd_or_dvd",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c",
          "lmm:cube_add_cube_eq_mul",
          "lmm:zeta_sub_one_prime1"
        ],
        "node_lean_decls": [
          "lambda_sq_dvd_or_dvd_or_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_or_dvd_or_dvd} \\lean{lambda_sq_dvd_or_dvd_or_dvd} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_add_eta_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.a_add_eta_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_add_eta_b} \\lean{Solution.a_add_eta_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_z} \\lean{Solution.lambda_not_dvd_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula1",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.formula1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula1} \\lean{Solution.formula1} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.two_le_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1.two_le_multiplicity"
        ],
        "node_lean_decls": [
          "Solution.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.two_le_multiplicity} \\lean{Solution.two_le_multiplicity} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:by_kummer",
        "node_deps": [
          "def:Solution",
          "lmm:eq_one_or_neg_one_of_unit_of_congruent",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_Z",
          "lmm:formula2"
        ],
        "node_lean_decls": [
          "Solution.by_kummer"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:by_kummer} \\lean{Solution.by_kummer} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_y_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "Solution.coprime_y_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_y_z} \\lean{Solution.coprime_y_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_x",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_dvd_a_add_eta_mul_b",
          "lmm:lambda_dvd_a_add_eta_sq_mul_b",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_w",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_x"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_x} \\lean{Solution.lambda_not_dvd_x} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:X_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.X_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:X_ne_zero} \\lean{Solution.X_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_X",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_X"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_X} \\lean{Solution.lambda_not_dvd_X} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "28 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_div_lambda_fourth",
        "node_deps": [],
        "node_lean_decls": [
          "Solution.lambda_sq_div_lambda_fourth"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_div_lambda_fourth} \\lean{Solution.lambda_sq_div_lambda_fourth} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "23 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_div_new_X_cubed",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_div_new_X_cubed"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_div_new_X_cubed} \\lean{Solution.lambda_sq_div_new_X_cubed} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1_final",
        "node_deps": [
          "def:Solution1",
          "lmm:final"
        ],
        "node_lean_decls": [
          "Solution'_final"
        ],
        "node_name": "thmenv",
        "node_title": "Final Solution\u2019",
        "node_source": "\\begin{thmenv}[Final Solution'] \\label{def:Solution1_final} \\lean{Solution'_final} \\leanok \\uses{def:Solution1, lmm:two_le_multiplicity, lmm:final} \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "78 Final Solution\u2019",
        "node_text_content": "    ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.two_le_multiplicity",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c"
        ],
        "node_lean_decls": [
          "Solution'.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.two_le_multiplicity} \\lean{Solution'.two_le_multiplicity} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "84 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:y_eq_unit_mul_cube",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
          "lmm:coprime_x_y",
          "lmm:coprime_y_z"
        ],
        "node_lean_decls": [
          "Solution.y_eq_unit_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:y_eq_unit_mul_cube} \\lean{Solution.y_eq_unit_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_Z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_Z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_Z} \\lean{Solution.lambda_not_dvd_Z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_minimal",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution.exists_minimal"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_minimal} \\lean{Solution.exists_minimal} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "d8b359db1798921f682f06574b6a61cfcd09418c": {
    "date": "2024-04-09T16:32:08",
    "graph": [
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_add_cube_eq_mul",
        "node_deps": [
          "def:Solution1",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "cube_add_cube_eq_mul"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_add_cube_eq_mul} \\lean{cube_add_cube_eq_mul} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:span_x_mul_span_y_mul_span_z",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three"
        ],
        "node_lean_decls": [
          "Solution.span_x_mul_span_y_mul_span_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:span_x_mul_span_y_mul_span_z} \\lean{Solution.span_x_mul_span_y_mul_span_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_Y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_Y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_Y} \\lean{Solution.lambda_not_dvd_Y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_Z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_Z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_Z} \\lean{Solution.lambda_not_dvd_Z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_minimal",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution.exists_minimal"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_minimal} \\lean{Solution.exists_minimal} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:ex_dvd_a_add_b",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_sq_dvd_or_dvd_or_dvd",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "ex_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:ex_dvd_a_add_b} \\lean{ex_dvd_a_add_b} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_x",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_dvd_a_add_eta_mul_b",
          "lmm:lambda_dvd_a_add_eta_sq_mul_b",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_w",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_x"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_x} \\lean{Solution.lambda_not_dvd_x} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "83 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:by_kummer",
        "node_deps": [
          "def:Solution",
          "lmm:eq_one_or_neg_one_of_unit_of_congruent",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_Z",
          "lmm:formula2"
        ],
        "node_lean_decls": [
          "Solution.by_kummer"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:by_kummer} \\lean{Solution.by_kummer} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "29 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_of_Solution1",
        "node_deps": [
          "def:Solution1",
          "def:Solution",
          "lmm:ex_dvd_a_add_b"
        ],
        "node_lean_decls": [
          "exists_Solution_of_Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_of_Solution1} \\lean{exists_Solution_of_Solution'} \\leanok \\uses{def:Solution1, def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:final",
        "node_deps": [
          "def:Solution",
          "lmm:formula2",
          "lmm:by_kummer"
        ],
        "node_lean_decls": [
          "Solution.final"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:final} \\lean{Solution.final} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "def:Solution1_final",
          "lmm:Solution1_final_multiplicity"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity_lt} \\lean{Solution'_final_multiplicity_lt} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_X",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_X"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_X} \\lean{Solution.lambda_not_dvd_X} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_Y_Z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_Z",
          "lmm:coprime_y_z"
        ],
        "node_lean_decls": [
          "Solution.coprime_Y_Z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_Y_Z} \\lean{Solution.coprime_Y_Z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.two_le_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1.two_le_multiplicity"
        ],
        "node_lean_decls": [
          "Solution.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.two_le_multiplicity} \\lean{Solution.two_le_multiplicity} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity",
        "node_deps": [
          "def:Solution",
          "def:Solution1_final",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity} \\lean{Solution'_final_multiplicity} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_two_dvd_c",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_c_cube"
        ],
        "node_lean_decls": [
          "lambda_pow_two_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_two_dvd_c} \\lean{lambda_pow_two_dvd_c} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_z} \\lean{Solution.coprime_x_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "lmm:exists_Solution_of_Solution1",
          "lmm:Solution1_final_multiplicity_lt"
        ],
        "node_lean_decls": [
          "Solution.exists_Solution_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_multiplicity_lt} \\lean{Solution.exists_Solution_multiplicity_lt} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_u_mul_cube",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_dvd_u_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_u_mul_cube} \\lean{Solution.lambda_sq_dvd_u_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "24 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula2",
        "node_deps": [
          "def:Solution",
          "lmm:eta_isUnit",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_cube_eq_one",
          "lmm:formula1"
        ],
        "node_lean_decls": [
          "Solution.formula2"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula2} \\lean{Solution.formula2} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1_final",
        "node_deps": [
          "def:Solution1",
          "lmm:final"
        ],
        "node_lean_decls": [
          "Solution'_final"
        ],
        "node_name": "thmenv",
        "node_title": "Final Solution\u2019",
        "node_source": "\\begin{thmenv}[Final Solution'] \\label{def:Solution1_final} \\lean{Solution'_final} \\leanok \\uses{def:Solution1, lmm:two_le_multiplicity, lmm:final} \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "79 Final Solution\u2019",
        "node_text_content": "    ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "30 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_z} \\lean{Solution.lambda_not_dvd_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:z_eq_unit_mul_cube",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
          "lmm:coprime_x_z",
          "lmm:coprime_y_z"
        ],
        "node_lean_decls": [
          "Solution.z_eq_unit_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:z_eq_unit_mul_cube} \\lean{Solution.z_eq_unit_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_cube_b_cube_same_congr",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_two"
        ],
        "node_lean_decls": [
          "a_cube_b_cube_same_congr"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_cube_b_cube_same_congr} \\lean{a_cube_b_cube_same_congr} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_add_one_inv",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.eta_add_one_inv"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_add_one_inv} \\lean{Solution.eta_add_one_inv} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:mult_minus_two_plus_one_plus_one",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.mult_minus_two_plus_one_plus_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:mult_minus_two_plus_one_plus_one} \\lean{Solution.mult_minus_two_plus_one_plus_one} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula1",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.formula1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula1} \\lean{Solution.formula1} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_add_eta_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.a_add_eta_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_add_eta_b} \\lean{Solution.a_add_eta_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_or_dvd_or_dvd",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c",
          "lmm:cube_add_cube_eq_mul",
          "lmm:zeta_sub_one_prime1"
        ],
        "node_lean_decls": [
          "lambda_sq_dvd_or_dvd_or_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_or_dvd_or_dvd} \\lean{lambda_sq_dvd_or_dvd_or_dvd} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.lambda_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_ne_zero} \\lean{Solution.lambda_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:x_eq_unit_mul_cube",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
          "lmm:coprime_x_y",
          "lmm:coprime_x_z"
        ],
        "node_lean_decls": [
          "Solution.x_eq_unit_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:x_eq_unit_mul_cube} \\lean{Solution.x_eq_unit_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_div_lambda_fourth",
        "node_deps": [],
        "node_lean_decls": [
          "Solution.lambda_sq_div_lambda_fourth"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_div_lambda_fourth} \\lean{Solution.lambda_sq_div_lambda_fourth} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_y} \\lean{Solution.lambda_not_dvd_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_w",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_w"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_w} \\lean{Solution.lambda_not_dvd_w} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_div_new_X_cubed",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_div_new_X_cubed"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_div_new_X_cubed} \\lean{Solution.lambda_sq_div_new_X_cubed} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_c_cube",
        "node_deps": [
          "def:Solution1",
          "lmm:a_cube_b_cube_same_congr"
        ],
        "node_lean_decls": [
          "lambda_pow_four_dvd_c_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_c_cube} \\lean{lambda_pow_four_dvd_c_cube} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "85 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime",
          "lmm:eta_add_one_inv",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.two_le_multiplicity",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c"
        ],
        "node_lean_decls": [
          "Solution'.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.two_le_multiplicity} \\lean{Solution'.two_le_multiplicity} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:X_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.X_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:X_ne_zero} \\lean{Solution.X_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:fermatLastTheoremWith_of_fermatLastTheoremWith_coprime",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremWith_of_fermatLastTheoremWith_coprime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:fermatLastTheoremWith_of_fermatLastTheoremWith_coprime} \\lean{fermatLastTheoremWith_of_fermatLastTheoremWith_coprime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_dvd_a_add_b",
        "node_deps": [
          "def:Solution",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_z",
          "lmm:lambda_not_dvd_y",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_pow_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_dvd_a_add_b} \\lean{Solution.lambda_pow_dvd_a_add_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_y_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "Solution.coprime_y_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_y_z} \\lean{Solution.coprime_y_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_a_add_eta_mul_b} \\lean{Solution.lambda_sq_not_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:cube_add_cube_eq_mul"
        ],
        "node_lean_decls": [
          "Solution.x_mul_y_mul_z_eq_u_w_pow_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:x_mul_y_mul_z_eq_u_w_pow_three} \\lean{Solution.x_mul_y_mul_z_eq_u_w_pow_three} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:y_eq_unit_mul_cube",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
          "lmm:coprime_x_y",
          "lmm:coprime_y_z"
        ],
        "node_lean_decls": [
          "Solution.y_eq_unit_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:y_eq_unit_mul_cube} \\lean{Solution.y_eq_unit_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eq_one_or_neg_one_of_unit_of_congruent",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eq_one_or_neg_one_of_unit_of_congruent} \\lean{IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "378a68fdb30cfa7f040b8dff19ee9b2a249a3259": {
    "date": "2024-04-09T17:16:03",
    "graph": [
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_a_add_eta_mul_b} \\lean{Solution.lambda_sq_not_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_add_one_inv",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.eta_add_one_inv"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_add_one_inv} \\lean{Solution.eta_add_one_inv} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_y_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "Solution.coprime_y_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_y_z} \\lean{Solution.coprime_y_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:y_eq_unit_mul_cube",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
          "lmm:coprime_x_y",
          "lmm:coprime_y_z"
        ],
        "node_lean_decls": [
          "Solution.y_eq_unit_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:y_eq_unit_mul_cube} \\lean{Solution.y_eq_unit_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_two_dvd_c",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_c_cube"
        ],
        "node_lean_decls": [
          "lambda_pow_two_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_two_dvd_c} \\lean{lambda_pow_two_dvd_c} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:z_eq_unit_mul_cube",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
          "lmm:coprime_x_z",
          "lmm:coprime_y_z"
        ],
        "node_lean_decls": [
          "Solution.z_eq_unit_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:z_eq_unit_mul_cube} \\lean{Solution.z_eq_unit_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:by_kummer",
        "node_deps": [
          "def:Solution",
          "lmm:eq_one_or_neg_one_of_unit_of_congruent",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_Z",
          "lmm:formula2"
        ],
        "node_lean_decls": [
          "Solution.by_kummer"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:by_kummer} \\lean{Solution.by_kummer} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "lmm:exists_Solution_of_Solution1",
          "lmm:Solution1_final_multiplicity_lt"
        ],
        "node_lean_decls": [
          "Solution.exists_Solution_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_multiplicity_lt} \\lean{Solution.exists_Solution_multiplicity_lt} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.two_le_multiplicity",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c"
        ],
        "node_lean_decls": [
          "Solution'.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.two_le_multiplicity} \\lean{Solution'.two_le_multiplicity} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime",
          "lmm:eta_add_one_inv",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_c_cube",
        "node_deps": [
          "def:Solution1",
          "lmm:a_cube_b_cube_same_congr"
        ],
        "node_lean_decls": [
          "lambda_pow_four_dvd_c_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_c_cube} \\lean{lambda_pow_four_dvd_c_cube} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_add_eta_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.a_add_eta_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_add_eta_b} \\lean{Solution.a_add_eta_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:x_eq_unit_mul_cube",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
          "lmm:coprime_x_y",
          "lmm:coprime_x_z"
        ],
        "node_lean_decls": [
          "Solution.x_eq_unit_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:x_eq_unit_mul_cube} \\lean{Solution.x_eq_unit_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_div_lambda_fourth",
        "node_deps": [],
        "node_lean_decls": [
          "Solution.lambda_sq_div_lambda_fourth"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_div_lambda_fourth} \\lean{Solution.lambda_sq_div_lambda_fourth} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eq_one_or_neg_one_of_unit_of_congruent",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eq_one_or_neg_one_of_unit_of_congruent} \\lean{IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:X_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.X_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:X_ne_zero} \\lean{Solution.X_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_div_new_X_cubed",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_div_new_X_cubed"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_div_new_X_cubed} \\lean{Solution.lambda_sq_div_new_X_cubed} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "85 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_cube_b_cube_same_congr",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_two"
        ],
        "node_lean_decls": [
          "a_cube_b_cube_same_congr"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_cube_b_cube_same_congr} \\lean{a_cube_b_cube_same_congr} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "24 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_y} \\lean{Solution.lambda_not_dvd_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:final",
        "node_deps": [
          "def:Solution",
          "lmm:formula2",
          "lmm:by_kummer"
        ],
        "node_lean_decls": [
          "Solution.final"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:final} \\lean{Solution.final} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_Z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_Z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_Z} \\lean{Solution.lambda_not_dvd_Z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.two_le_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1.two_le_multiplicity"
        ],
        "node_lean_decls": [
          "Solution.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.two_le_multiplicity} \\lean{Solution.two_le_multiplicity} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.lambda_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_ne_zero} \\lean{Solution.lambda_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "30 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:cube_add_cube_eq_mul"
        ],
        "node_lean_decls": [
          "Solution.x_mul_y_mul_z_eq_u_w_pow_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:x_mul_y_mul_z_eq_u_w_pow_three} \\lean{Solution.x_mul_y_mul_z_eq_u_w_pow_three} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula2",
        "node_deps": [
          "def:Solution",
          "lmm:eta_isUnit",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_cube_eq_one",
          "lmm:formula1"
        ],
        "node_lean_decls": [
          "Solution.formula2"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula2} \\lean{Solution.formula2} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_minimal",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution.exists_minimal"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_minimal} \\lean{Solution.exists_minimal} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_or_dvd_or_dvd",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c",
          "lmm:cube_add_cube_eq_mul",
          "lmm:zeta_sub_one_prime1"
        ],
        "node_lean_decls": [
          "lambda_sq_dvd_or_dvd_or_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_or_dvd_or_dvd} \\lean{lambda_sq_dvd_or_dvd_or_dvd} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_dvd_a_add_b",
        "node_deps": [
          "def:Solution",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_z",
          "lmm:lambda_not_dvd_y",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_pow_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_dvd_a_add_b} \\lean{Solution.lambda_pow_dvd_a_add_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_w",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_w"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_w} \\lean{Solution.lambda_not_dvd_w} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1_final",
        "node_deps": [
          "def:Solution1",
          "lmm:final"
        ],
        "node_lean_decls": [
          "Solution'_final"
        ],
        "node_name": "thmenv",
        "node_title": "Final Solution\u2019",
        "node_source": "\\begin{thmenv}[Final Solution'] \\label{def:Solution1_final} \\lean{Solution'_final} \\leanok \\uses{def:Solution1, lmm:two_le_multiplicity, lmm:final} \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "79 Final Solution\u2019",
        "node_text_content": "    ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:ex_dvd_a_add_b",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_sq_dvd_or_dvd_or_dvd",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "ex_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:ex_dvd_a_add_b} \\lean{ex_dvd_a_add_b} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula1",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.formula1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula1} \\lean{Solution.formula1} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_of_Solution1",
        "node_deps": [
          "def:Solution1",
          "def:Solution",
          "lmm:ex_dvd_a_add_b"
        ],
        "node_lean_decls": [
          "exists_Solution_of_Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_of_Solution1} \\lean{exists_Solution_of_Solution'} \\leanok \\uses{def:Solution1, def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_z} \\lean{Solution.lambda_not_dvd_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "29 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:mult_minus_two_plus_one_plus_one",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.mult_minus_two_plus_one_plus_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:mult_minus_two_plus_one_plus_one} \\lean{Solution.mult_minus_two_plus_one_plus_one} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_Y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_Y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_Y} \\lean{Solution.lambda_not_dvd_Y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_x",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_dvd_a_add_eta_mul_b",
          "lmm:lambda_dvd_a_add_eta_sq_mul_b",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_w",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_x"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_x} \\lean{Solution.lambda_not_dvd_x} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:span_x_mul_span_y_mul_span_z",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three"
        ],
        "node_lean_decls": [
          "Solution.span_x_mul_span_y_mul_span_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:span_x_mul_span_y_mul_span_z} \\lean{Solution.span_x_mul_span_y_mul_span_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "83 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "def:Solution1_final",
          "lmm:Solution1_final_multiplicity"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity_lt} \\lean{Solution'_final_multiplicity_lt} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_u_mul_cube",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_dvd_u_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_u_mul_cube} \\lean{Solution.lambda_sq_dvd_u_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:fermatLastTheoremWith_of_fermatLastTheoremWith_coprime",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremWith_of_fermatLastTheoremWith_coprime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:fermatLastTheoremWith_of_fermatLastTheoremWith_coprime} \\lean{fermatLastTheoremWith_of_fermatLastTheoremWith_coprime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_add_cube_eq_mul",
        "node_deps": [
          "def:Solution1",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "cube_add_cube_eq_mul"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_add_cube_eq_mul} \\lean{cube_add_cube_eq_mul} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_X",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_X"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_X} \\lean{Solution.lambda_not_dvd_X} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity",
        "node_deps": [
          "def:Solution",
          "def:Solution1_final",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity} \\lean{Solution'_final_multiplicity} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_z} \\lean{Solution.coprime_x_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_Y_Z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_Z",
          "lmm:coprime_y_z"
        ],
        "node_lean_decls": [
          "Solution.coprime_Y_Z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_Y_Z} \\lean{Solution.coprime_Y_Z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "433b844e588aab936654f28a6b0a72942c531f34": {
    "date": "2024-04-09T17:20:47",
    "graph": [
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:mult_minus_two_plus_one_plus_one",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.mult_minus_two_plus_one_plus_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:mult_minus_two_plus_one_plus_one} \\lean{Solution.mult_minus_two_plus_one_plus_one} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_u_mul_cube",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_dvd_u_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_u_mul_cube} \\lean{Solution.lambda_sq_dvd_u_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_add_eta_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.a_add_eta_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_add_eta_b} \\lean{Solution.a_add_eta_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_Y_Z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_Z",
          "lmm:coprime_y_z"
        ],
        "node_lean_decls": [
          "Solution.coprime_Y_Z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_Y_Z} \\lean{Solution.coprime_Y_Z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_cube_b_cube_same_congr",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_two"
        ],
        "node_lean_decls": [
          "a_cube_b_cube_same_congr"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_cube_b_cube_same_congr} \\lean{a_cube_b_cube_same_congr} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula1",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.formula1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula1} \\lean{Solution.formula1} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.two_le_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1.two_le_multiplicity"
        ],
        "node_lean_decls": [
          "Solution.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.two_le_multiplicity} \\lean{Solution.two_le_multiplicity} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_of_Solution1",
        "node_deps": [
          "def:Solution1",
          "def:Solution",
          "lmm:ex_dvd_a_add_b"
        ],
        "node_lean_decls": [
          "exists_Solution_of_Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_of_Solution1} \\lean{exists_Solution_of_Solution'} \\leanok \\uses{def:Solution1, def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_add_cube_eq_mul",
        "node_deps": [
          "def:Solution1",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "cube_add_cube_eq_mul"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_add_cube_eq_mul} \\lean{cube_add_cube_eq_mul} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_add_one_inv",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.eta_add_one_inv"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_add_one_inv} \\lean{Solution.eta_add_one_inv} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:cube_add_cube_eq_mul"
        ],
        "node_lean_decls": [
          "Solution.x_mul_y_mul_z_eq_u_w_pow_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:x_mul_y_mul_z_eq_u_w_pow_three} \\lean{Solution.x_mul_y_mul_z_eq_u_w_pow_three} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_Z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_Z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_Z} \\lean{Solution.lambda_not_dvd_Z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "30 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.lambda_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_ne_zero} \\lean{Solution.lambda_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_x",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_dvd_a_add_eta_mul_b",
          "lmm:lambda_dvd_a_add_eta_sq_mul_b",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_w",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_x"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_x} \\lean{Solution.lambda_not_dvd_x} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "29 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_a_add_eta_mul_b} \\lean{Solution.lambda_sq_not_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_div_new_X_cubed",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_div_new_X_cubed"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_div_new_X_cubed} \\lean{Solution.lambda_sq_div_new_X_cubed} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:fermatLastTheoremWith_of_fermatLastTheoremWith_coprime",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremWith_of_fermatLastTheoremWith_coprime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:fermatLastTheoremWith_of_fermatLastTheoremWith_coprime} \\lean{fermatLastTheoremWith_of_fermatLastTheoremWith_coprime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:by_kummer",
        "node_deps": [
          "def:Solution",
          "lmm:eq_one_or_neg_one_of_unit_of_congruent",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_Z",
          "lmm:formula2"
        ],
        "node_lean_decls": [
          "Solution.by_kummer"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:by_kummer} \\lean{Solution.by_kummer} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_Y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_Y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_Y} \\lean{Solution.lambda_not_dvd_Y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_minimal",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution.exists_minimal"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_minimal} \\lean{Solution.exists_minimal} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_z} \\lean{Solution.coprime_x_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_X",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_X"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_X} \\lean{Solution.lambda_not_dvd_X} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.two_le_multiplicity",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c"
        ],
        "node_lean_decls": [
          "Solution'.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.two_le_multiplicity} \\lean{Solution'.two_le_multiplicity} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_two_dvd_c",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_c_cube"
        ],
        "node_lean_decls": [
          "lambda_pow_two_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_two_dvd_c} \\lean{lambda_pow_two_dvd_c} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_or_dvd_or_dvd",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c",
          "lmm:cube_add_cube_eq_mul",
          "lmm:zeta_sub_one_prime1"
        ],
        "node_lean_decls": [
          "lambda_sq_dvd_or_dvd_or_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_or_dvd_or_dvd} \\lean{lambda_sq_dvd_or_dvd_or_dvd} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula2",
        "node_deps": [
          "def:Solution",
          "lmm:eta_isUnit",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_cube_eq_one",
          "lmm:formula1"
        ],
        "node_lean_decls": [
          "Solution.formula2"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula2} \\lean{Solution.formula2} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:final",
        "node_deps": [
          "def:Solution",
          "lmm:formula2",
          "lmm:by_kummer"
        ],
        "node_lean_decls": [
          "Solution.final"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:final} \\lean{Solution.final} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime",
          "lmm:eta_add_one_inv",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1_final",
        "node_deps": [
          "def:Solution1",
          "lmm:final"
        ],
        "node_lean_decls": [
          "Solution'_final"
        ],
        "node_name": "thmenv",
        "node_title": "Final Solution\u2019",
        "node_source": "\\begin{thmenv}[Final Solution'] \\label{def:Solution1_final} \\lean{Solution'_final} \\leanok \\uses{def:Solution1, lmm:two_le_multiplicity, lmm:final} \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "79 Final Solution\u2019",
        "node_text_content": "    ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:x_eq_unit_mul_cube",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
          "lmm:coprime_x_y",
          "lmm:coprime_x_z"
        ],
        "node_lean_decls": [
          "Solution.x_eq_unit_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:x_eq_unit_mul_cube} \\lean{Solution.x_eq_unit_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_div_lambda_fourth",
        "node_deps": [],
        "node_lean_decls": [
          "Solution.lambda_sq_div_lambda_fourth"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_div_lambda_fourth} \\lean{Solution.lambda_sq_div_lambda_fourth} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_y_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "Solution.coprime_y_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_y_z} \\lean{Solution.coprime_y_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:X_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.X_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:X_ne_zero} \\lean{Solution.X_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity",
        "node_deps": [
          "def:Solution",
          "def:Solution1_final",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity} \\lean{Solution'_final_multiplicity} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "lmm:exists_Solution_of_Solution1",
          "lmm:Solution1_final_multiplicity_lt"
        ],
        "node_lean_decls": [
          "Solution.exists_Solution_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_multiplicity_lt} \\lean{Solution.exists_Solution_multiplicity_lt} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:span_x_mul_span_y_mul_span_z",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three"
        ],
        "node_lean_decls": [
          "Solution.span_x_mul_span_y_mul_span_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:span_x_mul_span_y_mul_span_z} \\lean{Solution.span_x_mul_span_y_mul_span_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eq_one_or_neg_one_of_unit_of_congruent",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eq_one_or_neg_one_of_unit_of_congruent} \\lean{IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:y_eq_unit_mul_cube",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
          "lmm:coprime_x_y",
          "lmm:coprime_y_z"
        ],
        "node_lean_decls": [
          "Solution.y_eq_unit_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:y_eq_unit_mul_cube} \\lean{Solution.y_eq_unit_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:z_eq_unit_mul_cube",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
          "lmm:coprime_x_z",
          "lmm:coprime_y_z"
        ],
        "node_lean_decls": [
          "Solution.z_eq_unit_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:z_eq_unit_mul_cube} \\lean{Solution.z_eq_unit_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_w",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_w"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_w} \\lean{Solution.lambda_not_dvd_w} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid b$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223b and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_y} \\lean{Solution.lambda_not_dvd_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "def:Solution1_final",
          "lmm:Solution1_final_multiplicity"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity_lt} \\lean{Solution'_final_multiplicity_lt} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_c_cube",
        "node_deps": [
          "def:Solution1",
          "lmm:a_cube_b_cube_same_congr"
        ],
        "node_lean_decls": [
          "lambda_pow_four_dvd_c_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_c_cube} \\lean{lambda_pow_four_dvd_c_cube} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "24 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_z} \\lean{Solution.lambda_not_dvd_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid a$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223a and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:ex_dvd_a_add_b",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_sq_dvd_or_dvd_or_dvd",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "ex_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:ex_dvd_a_add_b} \\lean{ex_dvd_a_add_b} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_dvd_a_add_b",
        "node_deps": [
          "def:Solution",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_z",
          "lmm:lambda_not_dvd_y",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_pow_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_dvd_a_add_b} \\lean{Solution.lambda_pow_dvd_a_add_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "83 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "85 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "ac1c34c29245c22b4d96f7bac275a641d21852c5": {
    "date": "2024-04-09T17:26:55",
    "graph": [
      {
        "id": "def:Solution1_final",
        "node_deps": [
          "def:Solution1",
          "lmm:final"
        ],
        "node_lean_decls": [
          "Solution'_final"
        ],
        "node_name": "thmenv",
        "node_title": "Final Solution\u2019",
        "node_source": "\\begin{thmenv}[Final Solution'] \\label{def:Solution1_final} \\lean{Solution'_final} \\leanok \\uses{def:Solution1, lmm:two_le_multiplicity, lmm:final} \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "79 Final Solution\u2019",
        "node_text_content": "    ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:mult_minus_two_plus_one_plus_one",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.mult_minus_two_plus_one_plus_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:mult_minus_two_plus_one_plus_one} \\lean{Solution.mult_minus_two_plus_one_plus_one} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:span_x_mul_span_y_mul_span_z",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three"
        ],
        "node_lean_decls": [
          "Solution.span_x_mul_span_y_mul_span_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:span_x_mul_span_y_mul_span_z} \\lean{Solution.span_x_mul_span_y_mul_span_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:x_eq_unit_mul_cube",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
          "lmm:coprime_x_y",
          "lmm:coprime_x_z"
        ],
        "node_lean_decls": [
          "Solution.x_eq_unit_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:x_eq_unit_mul_cube} \\lean{Solution.x_eq_unit_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula1",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.formula1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula1} \\lean{Solution.formula1} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:fermatLastTheoremWith_of_fermatLastTheoremWith_coprime",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremWith_of_fermatLastTheoremWith_coprime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:fermatLastTheoremWith_of_fermatLastTheoremWith_coprime} \\lean{fermatLastTheoremWith_of_fermatLastTheoremWith_coprime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula2",
        "node_deps": [
          "def:Solution",
          "lmm:eta_isUnit",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_cube_eq_one",
          "lmm:formula1"
        ],
        "node_lean_decls": [
          "Solution.formula2"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula2} \\lean{Solution.formula2} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "30 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_z} \\lean{Solution.coprime_x_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:final",
        "node_deps": [
          "def:Solution",
          "lmm:formula2",
          "lmm:by_kummer"
        ],
        "node_lean_decls": [
          "Solution.final"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:final} \\lean{Solution.final} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "83 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "def:Solution1_final",
          "lmm:Solution1_final_multiplicity"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity_lt} \\lean{Solution'_final_multiplicity_lt} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ Let $3 \\mid a$ and $3 \\mid b$. \\\\ Let $a ^3 + b ^3 = c ^3$. \\\\ \\\\ Then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. Let 3 \u2223a and 3 \u2223b. Let a 3 + b 3 = c 3. Then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:by_kummer",
        "node_deps": [
          "def:Solution",
          "lmm:eq_one_or_neg_one_of_unit_of_congruent",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_Z",
          "lmm:formula2"
        ],
        "node_lean_decls": [
          "Solution.by_kummer"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:by_kummer} \\lean{Solution.by_kummer} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity",
        "node_deps": [
          "def:Solution",
          "def:Solution1_final",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity} \\lean{Solution'_final_multiplicity} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ Let $3 \\mid a$ and $3 \\mid c$. \\\\ Let $a ^3 + b ^3 = c ^3$. \\\\ \\\\ Then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. Let 3 \u2223a and 3 \u2223c. Let a 3 + b 3 = c 3. Then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_add_cube_eq_mul",
        "node_deps": [
          "def:Solution1",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "cube_add_cube_eq_mul"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_add_cube_eq_mul} \\lean{cube_add_cube_eq_mul} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_w",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_w"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_w} \\lean{Solution.lambda_not_dvd_w} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:cube_add_cube_eq_mul"
        ],
        "node_lean_decls": [
          "Solution.x_mul_y_mul_z_eq_u_w_pow_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:x_mul_y_mul_z_eq_u_w_pow_three} \\lean{Solution.x_mul_y_mul_z_eq_u_w_pow_three} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_c_cube",
        "node_deps": [
          "def:Solution1",
          "lmm:a_cube_b_cube_same_congr"
        ],
        "node_lean_decls": [
          "lambda_pow_four_dvd_c_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_c_cube} \\lean{lambda_pow_four_dvd_c_cube} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_z} \\lean{Solution.lambda_not_dvd_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_x",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_dvd_a_add_eta_mul_b",
          "lmm:lambda_dvd_a_add_eta_sq_mul_b",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_w",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_x"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_x} \\lean{Solution.lambda_not_dvd_x} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eq_one_or_neg_one_of_unit_of_congruent",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eq_one_or_neg_one_of_unit_of_congruent} \\lean{IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "85 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_Z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_Z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_Z} \\lean{Solution.lambda_not_dvd_Z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.two_le_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1.two_le_multiplicity"
        ],
        "node_lean_decls": [
          "Solution.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.two_le_multiplicity} \\lean{Solution.two_le_multiplicity} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:ex_dvd_a_add_b",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_sq_dvd_or_dvd_or_dvd",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "ex_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:ex_dvd_a_add_b} \\lean{ex_dvd_a_add_b} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_Y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_Y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_Y} \\lean{Solution.lambda_not_dvd_Y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:X_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.X_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:X_ne_zero} \\lean{Solution.X_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_minimal",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution.exists_minimal"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_minimal} \\lean{Solution.exists_minimal} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "24 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "29 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_add_one_inv",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.eta_add_one_inv"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_add_one_inv} \\lean{Solution.eta_add_one_inv} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.two_le_multiplicity",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c"
        ],
        "node_lean_decls": [
          "Solution'.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.two_le_multiplicity} \\lean{Solution'.two_le_multiplicity} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_or_dvd_or_dvd",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c",
          "lmm:cube_add_cube_eq_mul",
          "lmm:zeta_sub_one_prime1"
        ],
        "node_lean_decls": [
          "lambda_sq_dvd_or_dvd_or_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_or_dvd_or_dvd} \\lean{lambda_sq_dvd_or_dvd_or_dvd} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:y_eq_unit_mul_cube",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
          "lmm:coprime_x_y",
          "lmm:coprime_y_z"
        ],
        "node_lean_decls": [
          "Solution.y_eq_unit_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:y_eq_unit_mul_cube} \\lean{Solution.y_eq_unit_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_u_mul_cube",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_dvd_u_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_u_mul_cube} \\lean{Solution.lambda_sq_dvd_u_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_cube_b_cube_same_congr",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_two"
        ],
        "node_lean_decls": [
          "a_cube_b_cube_same_congr"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_cube_b_cube_same_congr} \\lean{a_cube_b_cube_same_congr} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_X",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_X"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_X} \\lean{Solution.lambda_not_dvd_X} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "lmm:exists_Solution_of_Solution1",
          "lmm:Solution1_final_multiplicity_lt"
        ],
        "node_lean_decls": [
          "Solution.exists_Solution_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_multiplicity_lt} \\lean{Solution.exists_Solution_multiplicity_lt} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_y_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "Solution.coprime_y_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_y_z} \\lean{Solution.coprime_y_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_add_eta_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.a_add_eta_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_add_eta_b} \\lean{Solution.a_add_eta_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_a_add_eta_mul_b} \\lean{Solution.lambda_sq_not_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_Y_Z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_Z",
          "lmm:coprime_y_z"
        ],
        "node_lean_decls": [
          "Solution.coprime_Y_Z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_Y_Z} \\lean{Solution.coprime_Y_Z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_div_new_X_cubed",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_div_new_X_cubed"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_div_new_X_cubed} \\lean{Solution.lambda_sq_div_new_X_cubed} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_two_dvd_c",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_c_cube"
        ],
        "node_lean_decls": [
          "lambda_pow_two_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_two_dvd_c} \\lean{lambda_pow_two_dvd_c} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_of_Solution1",
        "node_deps": [
          "def:Solution1",
          "def:Solution",
          "lmm:ex_dvd_a_add_b"
        ],
        "node_lean_decls": [
          "exists_Solution_of_Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_of_Solution1} \\lean{exists_Solution_of_Solution'} \\leanok \\uses{def:Solution1, def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_div_lambda_fourth",
        "node_deps": [],
        "node_lean_decls": [
          "Solution.lambda_sq_div_lambda_fourth"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_div_lambda_fourth} \\lean{Solution.lambda_sq_div_lambda_fourth} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_y} \\lean{Solution.lambda_not_dvd_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.lambda_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_ne_zero} \\lean{Solution.lambda_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_dvd_a_add_b",
        "node_deps": [
          "def:Solution",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_z",
          "lmm:lambda_not_dvd_y",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_pow_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_dvd_a_add_b} \\lean{Solution.lambda_pow_dvd_a_add_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:z_eq_unit_mul_cube",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
          "lmm:coprime_x_z",
          "lmm:coprime_y_z"
        ],
        "node_lean_decls": [
          "Solution.z_eq_unit_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:z_eq_unit_mul_cube} \\lean{Solution.z_eq_unit_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime",
          "lmm:eta_add_one_inv",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "dc61f21b818a491a3474d4e9c92d6ee8a61701d1": {
    "date": "2024-04-09T17:29:12",
    "graph": [
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "29 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime",
          "lmm:eta_add_one_inv",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_two_dvd_c",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_c_cube"
        ],
        "node_lean_decls": [
          "lambda_pow_two_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_two_dvd_c} \\lean{lambda_pow_two_dvd_c} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "83 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ Let $3 \\mid a$ and $3 \\mid b$. \\\\ Let $a ^3 + b ^3 = c ^3$. \\\\ \\\\ Then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. Let 3 \u2223a and 3 \u2223b. Let a 3 + b 3 = c 3. Then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:by_kummer",
        "node_deps": [
          "def:Solution",
          "lmm:eq_one_or_neg_one_of_unit_of_congruent",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_Z",
          "lmm:formula2"
        ],
        "node_lean_decls": [
          "Solution.by_kummer"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:by_kummer} \\lean{Solution.by_kummer} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:final",
        "node_deps": [
          "def:Solution",
          "lmm:formula2",
          "lmm:by_kummer"
        ],
        "node_lean_decls": [
          "Solution.final"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:final} \\lean{Solution.final} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.two_le_multiplicity",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c"
        ],
        "node_lean_decls": [
          "Solution'.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.two_le_multiplicity} \\lean{Solution'.two_le_multiplicity} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_dvd_a_add_b",
        "node_deps": [
          "def:Solution",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_z",
          "lmm:lambda_not_dvd_y",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_pow_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_dvd_a_add_b} \\lean{Solution.lambda_pow_dvd_a_add_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:x_eq_unit_mul_cube",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
          "lmm:coprime_x_y",
          "lmm:coprime_x_z"
        ],
        "node_lean_decls": [
          "Solution.x_eq_unit_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:x_eq_unit_mul_cube} \\lean{Solution.x_eq_unit_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "def:Solution1_final",
          "lmm:Solution1_final_multiplicity"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity_lt} \\lean{Solution'_final_multiplicity_lt} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_u_mul_cube",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_dvd_u_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_u_mul_cube} \\lean{Solution.lambda_sq_dvd_u_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_or_dvd_or_dvd",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c",
          "lmm:cube_add_cube_eq_mul",
          "lmm:zeta_sub_one_prime1"
        ],
        "node_lean_decls": [
          "lambda_sq_dvd_or_dvd_or_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_or_dvd_or_dvd} \\lean{lambda_sq_dvd_or_dvd_or_dvd} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_add_eta_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.a_add_eta_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_add_eta_b} \\lean{Solution.a_add_eta_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity",
        "node_deps": [
          "def:Solution",
          "def:Solution1_final",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity} \\lean{Solution'_final_multiplicity} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_w",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_w"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_w} \\lean{Solution.lambda_not_dvd_w} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_Y_Z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_Z",
          "lmm:coprime_y_z"
        ],
        "node_lean_decls": [
          "Solution.coprime_Y_Z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_Y_Z} \\lean{Solution.coprime_Y_Z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eq_one_or_neg_one_of_unit_of_congruent",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eq_one_or_neg_one_of_unit_of_congruent} \\lean{IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_Y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_Y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_Y} \\lean{Solution.lambda_not_dvd_Y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:cube_add_cube_eq_mul"
        ],
        "node_lean_decls": [
          "Solution.x_mul_y_mul_z_eq_u_w_pow_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:x_mul_y_mul_z_eq_u_w_pow_three} \\lean{Solution.x_mul_y_mul_z_eq_u_w_pow_three} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_x",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_dvd_a_add_eta_mul_b",
          "lmm:lambda_dvd_a_add_eta_sq_mul_b",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_w",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_x"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_x} \\lean{Solution.lambda_not_dvd_x} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:span_x_mul_span_y_mul_span_z",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three"
        ],
        "node_lean_decls": [
          "Solution.span_x_mul_span_y_mul_span_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:span_x_mul_span_y_mul_span_z} \\lean{Solution.span_x_mul_span_y_mul_span_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula2",
        "node_deps": [
          "def:Solution",
          "lmm:eta_isUnit",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_cube_eq_one",
          "lmm:formula1"
        ],
        "node_lean_decls": [
          "Solution.formula2"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula2} \\lean{Solution.formula2} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok $\\forall a, b, c \\in \\mathbb {N}$, if $a \\neq 0$ and $b \\neq 0$ and $c \\neq 0$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "85 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N, if a \u22600 and b \u22600 and c \u22600, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_c_cube",
        "node_deps": [
          "def:Solution1",
          "lmm:a_cube_b_cube_same_congr"
        ],
        "node_lean_decls": [
          "lambda_pow_four_dvd_c_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_c_cube} \\lean{lambda_pow_four_dvd_c_cube} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:fermatLastTheoremWith_of_fermatLastTheoremWith_coprime",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremWith_of_fermatLastTheoremWith_coprime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:fermatLastTheoremWith_of_fermatLastTheoremWith_coprime} \\lean{fermatLastTheoremWith_of_fermatLastTheoremWith_coprime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ Let $3 \\mid a$ and $3 \\mid c$. \\\\ Let $a ^3 + b ^3 = c ^3$. \\\\ \\\\ Then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. Let 3 \u2223a and 3 \u2223c. Let a 3 + b 3 = c 3. Then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_div_lambda_fourth",
        "node_deps": [],
        "node_lean_decls": [
          "Solution.lambda_sq_div_lambda_fourth"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_div_lambda_fourth} \\lean{Solution.lambda_sq_div_lambda_fourth} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_z} \\lean{Solution.coprime_x_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1_final",
        "node_deps": [
          "def:Solution1",
          "lmm:final"
        ],
        "node_lean_decls": [
          "Solution'_final"
        ],
        "node_name": "thmenv",
        "node_title": "Final Solution\u2019",
        "node_source": "\\begin{thmenv}[Final Solution'] \\label{def:Solution1_final} \\lean{Solution'_final} \\leanok \\uses{def:Solution1, lmm:two_le_multiplicity, lmm:final} \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "79 Final Solution\u2019",
        "node_text_content": "    ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_add_cube_eq_mul",
        "node_deps": [
          "def:Solution1",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "cube_add_cube_eq_mul"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_add_cube_eq_mul} \\lean{cube_add_cube_eq_mul} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_add_one_inv",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.eta_add_one_inv"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_add_one_inv} \\lean{Solution.eta_add_one_inv} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula1",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.formula1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula1} \\lean{Solution.formula1} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_div_new_X_cubed",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_div_new_X_cubed"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_div_new_X_cubed} \\lean{Solution.lambda_sq_div_new_X_cubed} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_cube_b_cube_same_congr",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_two"
        ],
        "node_lean_decls": [
          "a_cube_b_cube_same_congr"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_cube_b_cube_same_congr} \\lean{a_cube_b_cube_same_congr} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:ex_dvd_a_add_b",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_sq_dvd_or_dvd_or_dvd",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "ex_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:ex_dvd_a_add_b} \\lean{ex_dvd_a_add_b} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_y_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "Solution.coprime_y_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_y_z} \\lean{Solution.coprime_y_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_a_add_eta_mul_b} \\lean{Solution.lambda_sq_not_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "24 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "lmm:exists_Solution_of_Solution1",
          "lmm:Solution1_final_multiplicity_lt"
        ],
        "node_lean_decls": [
          "Solution.exists_Solution_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_multiplicity_lt} \\lean{Solution.exists_Solution_multiplicity_lt} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_X",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_X"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_X} \\lean{Solution.lambda_not_dvd_X} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "30 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.two_le_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1.two_le_multiplicity"
        ],
        "node_lean_decls": [
          "Solution.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.two_le_multiplicity} \\lean{Solution.two_le_multiplicity} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:y_eq_unit_mul_cube",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
          "lmm:coprime_x_y",
          "lmm:coprime_y_z"
        ],
        "node_lean_decls": [
          "Solution.y_eq_unit_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:y_eq_unit_mul_cube} \\lean{Solution.y_eq_unit_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:X_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.X_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:X_ne_zero} \\lean{Solution.X_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_minimal",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution.exists_minimal"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_minimal} \\lean{Solution.exists_minimal} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_Z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_Z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_Z} \\lean{Solution.lambda_not_dvd_Z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_of_Solution1",
        "node_deps": [
          "def:Solution1",
          "def:Solution",
          "lmm:ex_dvd_a_add_b"
        ],
        "node_lean_decls": [
          "exists_Solution_of_Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_of_Solution1} \\lean{exists_Solution_of_Solution'} \\leanok \\uses{def:Solution1, def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.lambda_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_ne_zero} \\lean{Solution.lambda_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_z} \\lean{Solution.lambda_not_dvd_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:z_eq_unit_mul_cube",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
          "lmm:coprime_x_z",
          "lmm:coprime_y_z"
        ],
        "node_lean_decls": [
          "Solution.z_eq_unit_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:z_eq_unit_mul_cube} \\lean{Solution.z_eq_unit_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_y} \\lean{Solution.lambda_not_dvd_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:mult_minus_two_plus_one_plus_one",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.mult_minus_two_plus_one_plus_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:mult_minus_two_plus_one_plus_one} \\lean{Solution.mult_minus_two_plus_one_plus_one} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "698e557ac33dcedd892784d02b3ee29ee85a2419": {
    "date": "2024-04-09T17:33:39",
    "graph": [
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_cube_b_cube_same_congr",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_two"
        ],
        "node_lean_decls": [
          "a_cube_b_cube_same_congr"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_cube_b_cube_same_congr} \\lean{a_cube_b_cube_same_congr} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_div_lambda_fourth",
        "node_deps": [],
        "node_lean_decls": [
          "Solution.lambda_sq_div_lambda_fourth"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_div_lambda_fourth} \\lean{Solution.lambda_sq_div_lambda_fourth} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ Let $3 \\mid a$ and $3 \\mid c$. \\\\ Let $a ^3 + b ^3 = c ^3$. \\\\ \\\\ Then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. Let 3 \u2223a and 3 \u2223c. Let a 3 + b 3 = c 3. Then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_y} \\lean{Solution.lambda_not_dvd_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_w",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_w"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_w} \\lean{Solution.lambda_not_dvd_w} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:z_eq_unit_mul_cube",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
          "lmm:coprime_x_z",
          "lmm:coprime_y_z"
        ],
        "node_lean_decls": [
          "Solution.z_eq_unit_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:z_eq_unit_mul_cube} \\lean{Solution.z_eq_unit_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "24 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_div_new_X_cubed",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_div_new_X_cubed"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_div_new_X_cubed} \\lean{Solution.lambda_sq_div_new_X_cubed} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.two_le_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1.two_le_multiplicity"
        ],
        "node_lean_decls": [
          "Solution.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.two_le_multiplicity} \\lean{Solution.two_le_multiplicity} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime",
          "lmm:eta_add_one_inv",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:by_kummer",
        "node_deps": [
          "def:Solution",
          "lmm:eq_one_or_neg_one_of_unit_of_congruent",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_Z",
          "lmm:formula2"
        ],
        "node_lean_decls": [
          "Solution.by_kummer"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:by_kummer} \\lean{Solution.by_kummer} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:mult_minus_two_plus_one_plus_one",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.mult_minus_two_plus_one_plus_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:mult_minus_two_plus_one_plus_one} \\lean{Solution.mult_minus_two_plus_one_plus_one} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_dvd_a_add_b",
        "node_deps": [
          "def:Solution",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_z",
          "lmm:lambda_not_dvd_y",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_pow_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_dvd_a_add_b} \\lean{Solution.lambda_pow_dvd_a_add_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_of_Solution1",
        "node_deps": [
          "def:Solution1",
          "def:Solution",
          "lmm:ex_dvd_a_add_b"
        ],
        "node_lean_decls": [
          "exists_Solution_of_Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_of_Solution1} \\lean{exists_Solution_of_Solution'} \\leanok \\uses{def:Solution1, def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:x_eq_unit_mul_cube",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
          "lmm:coprime_x_y",
          "lmm:coprime_x_z"
        ],
        "node_lean_decls": [
          "Solution.x_eq_unit_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:x_eq_unit_mul_cube} \\lean{Solution.x_eq_unit_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_z} \\lean{Solution.coprime_x_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "29 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:X_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.X_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:X_ne_zero} \\lean{Solution.X_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_two_dvd_c",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_c_cube"
        ],
        "node_lean_decls": [
          "lambda_pow_two_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_two_dvd_c} \\lean{lambda_pow_two_dvd_c} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_add_eta_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.a_add_eta_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_add_eta_b} \\lean{Solution.a_add_eta_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eq_one_or_neg_one_of_unit_of_congruent",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eq_one_or_neg_one_of_unit_of_congruent} \\lean{IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.lambda_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_ne_zero} \\lean{Solution.lambda_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_add_one_inv",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.eta_add_one_inv"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_add_one_inv} \\lean{Solution.eta_add_one_inv} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_x",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_dvd_a_add_eta_mul_b",
          "lmm:lambda_dvd_a_add_eta_sq_mul_b",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_w",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_x"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_x} \\lean{Solution.lambda_not_dvd_x} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "83 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:final",
        "node_deps": [
          "def:Solution",
          "lmm:formula2",
          "lmm:by_kummer"
        ],
        "node_lean_decls": [
          "Solution.final"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:final} \\lean{Solution.final} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "def:Solution1_final",
          "lmm:Solution1_final_multiplicity"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity_lt} \\lean{Solution'_final_multiplicity_lt} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:cube_add_cube_eq_mul"
        ],
        "node_lean_decls": [
          "Solution.x_mul_y_mul_z_eq_u_w_pow_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:x_mul_y_mul_z_eq_u_w_pow_three} \\lean{Solution.x_mul_y_mul_z_eq_u_w_pow_three} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity",
        "node_deps": [
          "def:Solution",
          "def:Solution1_final",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity} \\lean{Solution'_final_multiplicity} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_a_add_eta_mul_b} \\lean{Solution.lambda_sq_not_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:span_x_mul_span_y_mul_span_z",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three"
        ],
        "node_lean_decls": [
          "Solution.span_x_mul_span_y_mul_span_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:span_x_mul_span_y_mul_span_z} \\lean{Solution.span_x_mul_span_y_mul_span_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:y_eq_unit_mul_cube",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
          "lmm:coprime_x_y",
          "lmm:coprime_y_z"
        ],
        "node_lean_decls": [
          "Solution.y_eq_unit_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:y_eq_unit_mul_cube} \\lean{Solution.y_eq_unit_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:fermatLastTheoremWith_of_fermatLastTheoremWith_coprime",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremWith_of_fermatLastTheoremWith_coprime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:fermatLastTheoremWith_of_fermatLastTheoremWith_coprime} \\lean{fermatLastTheoremWith_of_fermatLastTheoremWith_coprime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_minimal",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution.exists_minimal"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_minimal} \\lean{Solution.exists_minimal} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_Y_Z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_Z",
          "lmm:coprime_y_z"
        ],
        "node_lean_decls": [
          "Solution.coprime_Y_Z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_Y_Z} \\lean{Solution.coprime_Y_Z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "30 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_Y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_Y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_Y} \\lean{Solution.lambda_not_dvd_Y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_Z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_Z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_Z} \\lean{Solution.lambda_not_dvd_Z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula2",
        "node_deps": [
          "def:Solution",
          "lmm:eta_isUnit",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_cube_eq_one",
          "lmm:formula1"
        ],
        "node_lean_decls": [
          "Solution.formula2"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula2} \\lean{Solution.formula2} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "lmm:exists_Solution_of_Solution1",
          "lmm:Solution1_final_multiplicity_lt"
        ],
        "node_lean_decls": [
          "Solution.exists_Solution_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_multiplicity_lt} \\lean{Solution.exists_Solution_multiplicity_lt} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_z} \\lean{Solution.lambda_not_dvd_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_u_mul_cube",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_dvd_u_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_u_mul_cube} \\lean{Solution.lambda_sq_dvd_u_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_c_cube",
        "node_deps": [
          "def:Solution1",
          "lmm:a_cube_b_cube_same_congr"
        ],
        "node_lean_decls": [
          "lambda_pow_four_dvd_c_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_c_cube} \\lean{lambda_pow_four_dvd_c_cube} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.two_le_multiplicity",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c"
        ],
        "node_lean_decls": [
          "Solution'.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.two_le_multiplicity} \\lean{Solution'.two_le_multiplicity} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1_final",
        "node_deps": [
          "def:Solution1",
          "lmm:final"
        ],
        "node_lean_decls": [
          "Solution'_final"
        ],
        "node_name": "thmenv",
        "node_title": "Final Solution\u2019",
        "node_source": "\\begin{thmenv}[Final Solution'] \\label{def:Solution1_final} \\lean{Solution'_final} \\leanok \\uses{def:Solution1, lmm:two_le_multiplicity, lmm:final} \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "79 Final Solution\u2019",
        "node_text_content": "    ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_X",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_X"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_X} \\lean{Solution.lambda_not_dvd_X} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula1",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.formula1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula1} \\lean{Solution.formula1} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok \\\\ Let $a, b, c \\in \\mathbb {N}$. \\\\ Let $3 \\mid a$ and $3 \\mid b$. \\\\ Let $a ^3 + b ^3 = c ^3$. \\\\ \\\\ Then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. Let 3 \u2223a and 3 \u2223b. Let a 3 + b 3 = c 3. Then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_y_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "Solution.coprime_y_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_y_z} \\lean{Solution.coprime_y_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok \n\n\\[ \\forall a, b, c \\in \\mathbb {N}, \\text{ if }$ a \\neq 0 \\text{ and } b \\neq 0 \\text{ and } c \\neq 0, \\text{ then } a ^3 + b ^3 \\neq c ^3.$$ $ \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "85 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N,  if  a \u22600  and  b \u22600  and  c \u22600,  then  a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_add_cube_eq_mul",
        "node_deps": [
          "def:Solution1",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "cube_add_cube_eq_mul"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_add_cube_eq_mul} \\lean{cube_add_cube_eq_mul} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_or_dvd_or_dvd",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c",
          "lmm:cube_add_cube_eq_mul",
          "lmm:zeta_sub_one_prime1"
        ],
        "node_lean_decls": [
          "lambda_sq_dvd_or_dvd_or_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_or_dvd_or_dvd} \\lean{lambda_sq_dvd_or_dvd_or_dvd} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:ex_dvd_a_add_b",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_sq_dvd_or_dvd_or_dvd",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "ex_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:ex_dvd_a_add_b} \\lean{ex_dvd_a_add_b} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "e9fa4e16d5c4eef903f643e131e4400307635706": {
    "date": "2024-04-09T17:46:13",
    "graph": [
      {
        "id": "lmm:lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_prime} \\lean{IsPrimitiveRoot.lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:X_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.X_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:X_ne_zero} \\lean{Solution.X_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremForThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremForThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Generalised Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremForThreeGen} \\lean{fermatLastTheoremForThreeGen} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ \\\\ $\\forall a, b, c \\in \\mathcal{O}_K,\\,  \\forall u \\in \\mathcal{O}^\\times _K$, if $c \\neq 0$ and $\\lambda \\nmid a$ and $\\lambda \\nmid b$ and $\\lambda \\mid c$ and $\\gcd (a,b)=1$, then $a^3 + b^3 \\neq u \\cdot c^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "83 Generalised Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. \u2200a, b, c OK,\u2009 \u2200u O\u00d7K, if c \u22600 and \u03bba and \u03bbb and \u03bb\u2223c and (a,b)=1, then a3 + b3 \u2260u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_ne_zero",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.lambda_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_ne_zero} \\lean{Solution.lambda_ne_zero} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_not_dvd} \\lean{cube_of_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:span_x_mul_span_y_mul_span_z",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three"
        ],
        "node_lean_decls": [
          "Solution.span_x_mul_span_y_mul_span_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:span_x_mul_span_y_mul_span_z} \\lean{Solution.span_x_mul_span_y_mul_span_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:y_eq_unit_mul_cube",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
          "lmm:coprime_x_y",
          "lmm:coprime_y_z"
        ],
        "node_lean_decls": [
          "Solution.y_eq_unit_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:y_eq_unit_mul_cube} \\lean{Solution.y_eq_unit_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_u_mul_cube",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_dvd_u_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_u_mul_cube} \\lean{Solution.lambda_sq_dvd_u_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:final",
        "node_deps": [
          "def:Solution",
          "lmm:formula2",
          "lmm:by_kummer"
        ],
        "node_lean_decls": [
          "Solution.final"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:final} \\lean{Solution.final} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_minimal",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution.exists_minimal"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_minimal} \\lean{Solution.exists_minimal} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_dvd_a_add_b",
        "node_deps": [
          "def:Solution",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_z",
          "lmm:lambda_not_dvd_y",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_pow_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_dvd_a_add_b} \\lean{Solution.lambda_pow_dvd_a_add_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_div_new_X_cubed",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_div_new_X_cubed"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_div_new_X_cubed} \\lean{Solution.lambda_sq_div_new_X_cubed} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:by_kummer",
        "node_deps": [
          "def:Solution",
          "lmm:eq_one_or_neg_one_of_unit_of_congruent",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_Z",
          "lmm:formula2"
        ],
        "node_lean_decls": [
          "Solution.by_kummer"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:by_kummer} \\lean{Solution.by_kummer} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_three",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_three} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_three} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_isUnit",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.eta_isUnit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_isUnit} \\lean{IsPrimitiveRoot.eta_isUnit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_dvd_or_dvd_or_dvd",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c",
          "lmm:cube_add_cube_eq_mul",
          "lmm:zeta_sub_one_prime1"
        ],
        "node_lean_decls": [
          "lambda_sq_dvd_or_dvd_or_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_dvd_or_dvd_or_dvd} \\lean{lambda_sq_dvd_or_dvd_or_dvd} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_z} \\lean{Solution.lambda_not_dvd_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:zeta_sub_one_prime1",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.zeta_sub_one_prime'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:zeta_sub_one_prime1} \\lean{IsPrimitiveRoot.zeta_sub_one_prime'} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_two_dvd_c",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_c_cube"
        ],
        "node_lean_decls": [
          "lambda_pow_two_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_two_dvd_c} \\lean{lambda_pow_two_dvd_c} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_add_eta_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.a_add_eta_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_add_eta_b} \\lean{Solution.a_add_eta_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for Exponent $3$",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for Exponent $3$] \\label{thm:fermatLastTheoremThree} \\lean{fermatLastTheoremThree} \\leanok \n\n\\[ \\forall a, b, c \\in \\mathbb {N}, \\text{ if }$ a \\neq 0 \\text{ and } b \\neq 0 \\text{ and } c \\neq 0, \\text{ then } a ^3 + b ^3 \\neq c ^3.$$ $ \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "85 Fermat\u2019s Last Theorem for Exponent $3$",
        "node_text_content": "   \u2200a, b, c N,  if  a \u22600  and  b \u22600  and  c \u22600,  then  a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution",
        "node_deps": [],
        "node_lean_decls": [
          "Solution"
        ],
        "node_name": "thmenv",
        "node_title": "Solution",
        "node_source": "\\begin{thmenv}[Solution] \\label{def:Solution} \\lean{Solution} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$, $\\gcd (a,b)=1$ and $\\lambda ^2 \\mid a+b$. \\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "30 Solution",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600, (a,b)=1 and \u03bb2 \u2223a+b. Let u O\u00d7K. A solution is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_of_dvd_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_c_cube",
        "node_deps": [
          "def:Solution1",
          "lmm:a_cube_b_cube_same_congr"
        ],
        "node_lean_decls": [
          "lambda_pow_four_dvd_c_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_c_cube} \\lean{lambda_pow_four_dvd_c_cube} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:cube_add_cube_eq_mul"
        ],
        "node_lean_decls": [
          "Solution.x_mul_y_mul_z_eq_u_w_pow_three"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:x_mul_y_mul_z_eq_u_w_pow_three} \\lean{Solution.x_mul_y_mul_z_eq_u_w_pow_three} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eq_one_or_neg_one_of_unit_of_congruent",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eq_one_or_neg_one_of_unit_of_congruent} \\lean{IsCyclotomicExtension.Rat.Three.eq_one_or_neg_one_of_unit_of_congruent} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_cube_eq_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_cube_eq_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_cube_eq_one} \\lean{IsPrimitiveRoot.toInteger_cube_eq_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_of_Solution1",
        "node_deps": [
          "def:Solution1",
          "def:Solution",
          "lmm:ex_dvd_a_add_b"
        ],
        "node_lean_decls": [
          "exists_Solution_of_Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_of_Solution1} \\lean{exists_Solution_of_Solution'} \\leanok \\uses{def:Solution1, def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_z} \\lean{Solution.coprime_x_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:toInteger_eval_cyclo",
        "node_deps": [],
        "node_lean_decls": [
          "IsPrimitiveRoot.toInteger_eval_cyclo"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:toInteger_eval_cyclo} \\lean{IsPrimitiveRoot.toInteger_eval_cyclo} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:eta_add_one_inv",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.eta_add_one_inv"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:eta_add_one_inv} \\lean{Solution.eta_add_one_inv} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_Y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_Y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_Y} \\lean{Solution.lambda_not_dvd_Y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ Let $3 \\mid a$ and $3 \\mid c$. \\\\ Let $a ^3 + b ^3 = c ^3$. \\\\ \\\\ Then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. Let 3 \u2223a and 3 \u2223c. Let a 3 + b 3 = c 3. Then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:exists_Solution_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "lmm:exists_Solution_of_Solution1",
          "lmm:Solution1_final_multiplicity_lt"
        ],
        "node_lean_decls": [
          "Solution.exists_Solution_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:exists_Solution_multiplicity_lt} \\lean{Solution.exists_Solution_multiplicity_lt} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_add_one_of_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_sq_not_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:fermatLastTheoremWith_of_fermatLastTheoremWith_coprime",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremWith_of_fermatLastTheoremWith_coprime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:fermatLastTheoremWith_of_fermatLastTheoremWith_coprime} \\lean{fermatLastTheoremWith_of_fermatLastTheoremWith_coprime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda_prime",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda_prime"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda_prime} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda_prime} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\lean{IsCyclotomicExtension.Rat.Three.lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_add_cube_eq_mul",
        "node_deps": [
          "def:Solution1",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "cube_add_cube_eq_mul"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_add_cube_eq_mul} \\lean{cube_add_cube_eq_mul} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula2",
        "node_deps": [
          "def:Solution",
          "lmm:eta_isUnit",
          "lmm:lambda_ne_zero",
          "lmm:toInteger_cube_eq_one",
          "lmm:formula1"
        ],
        "node_lean_decls": [
          "Solution.formula2"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula2} \\lean{Solution.formula2} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1",
        "node_deps": [],
        "node_lean_decls": [
          "Solution'"
        ],
        "node_name": "thmenv",
        "node_title": "Solution\u2019",
        "node_source": "\\begin{thmenv}[Solution'] \\label{def:Solution1} \\lean{Solution'} \\leanok Let $K$ be a number field. \\\\ Let $\\mathcal{O}_K$ be the ring of integers of $K$. \\\\ Let $\\mathcal{O}^\\times _K$ be the group of units of $\\mathcal{O}_K$. \\\\ Let $a, b, c \\in \\mathcal{O}_K$ such that $\\lambda \\nmid a$, $\\lambda \\nmid b$, $\\lambda \\mid c$, $c \\neq 0$ and $\\gcd (a,b)=1$.\\\\ Let $u \\in \\mathcal{O}^\\times _K$. \\\\ \\\\ A $\\boldsymbol {solution\u2019}$ is a tuple $(a, b, c, u)$ satisfying the equation $a^3 + b^3 = u \\cdot c^3.$ \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "29 Solution\u2019",
        "node_text_content": "   Let K be a number field. Let OK be the ring of integers of K. Let O\u00d7K be the group of units of OK. Let a, b, c OK such that \u03bba, \u03bbb, \u03bb\u2223c, c \u22600 and (a,b)=1.Let u O\u00d7K. A solution\u2019 is a tuple (a, b, c, u) satisfying the equation a3 + b3 = u \u00b7c3. ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:a_cube_b_cube_same_congr",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_four_dvd_cube_sub_one_or_add_one_of_lambda_not_dvd",
          "lmm:lambda_not_dvd_two"
        ],
        "node_lean_decls": [
          "a_cube_b_cube_same_congr"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:a_cube_b_cube_same_congr} \\lean{a_cube_b_cube_same_congr} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:norm_lambda",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.norm_lambda"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:norm_lambda} \\lean{IsCyclotomicExtension.Rat.Three.norm_lambda} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime",
          "lmm:eta_add_one_inv",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_sq__mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_Z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_Z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_Z} \\lean{Solution.lambda_not_dvd_Z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_two",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_two} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_dvd_two} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_not_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:a_add_eta_b",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_not_a_add_eta_mul_b} \\lean{Solution.lambda_sq_not_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_x",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_dvd_a_add_eta_mul_b",
          "lmm:lambda_dvd_a_add_eta_sq_mul_b",
          "lmm:cube_add_cube_eq_mul",
          "lmm:lambda_prime",
          "lmm:lambda_not_dvd_w",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_x"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_x} \\lean{Solution.lambda_not_dvd_x} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:mult_minus_two_plus_one_plus_one",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.mult_minus_two_plus_one_plus_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:mult_minus_two_plus_one_plus_one} \\lean{Solution.mult_minus_two_plus_one_plus_one} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_Y_Z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_Z",
          "lmm:coprime_y_z"
        ],
        "node_lean_decls": [
          "Solution.coprime_Y_Z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_Y_Z} \\lean{Solution.coprime_Y_Z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:card_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.card_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:card_quot} \\lean{IsCyclotomicExtension.Rat.Three.card_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_prime"
        ],
        "node_lean_decls": [
          "Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\lean{Solution.associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_case_1",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_case_1"
        ],
        "node_name": "thmenv",
        "node_title": "Fermat\u2019s Last Theorem for 3: Case 1",
        "node_source": "\\begin{thmenv}[Fermat's Last Theorem for 3: Case 1] \\label{thm:fermatLastTheoremThree_case_1} \\lean{fermatLastTheoremThree_case_1} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\nmid a \\cdot b \\cdot c$, then $a ^3 + b ^3 \\neq c ^3$. \n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "24 Fermat\u2019s Last Theorem for 3: Case 1",
        "node_text_content": "   Let a, b, c N. If 3 a \u00b7b \u00b7c, then a 3 + b 3 \u2260c 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_of_castHom_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "cube_of_castHom_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_of_castHom_ne_zero} \\lean{cube_of_castHom_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:ex_dvd_a_add_b",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_sq_dvd_or_dvd_or_dvd",
          "lmm:toInteger_cube_eq_one"
        ],
        "node_lean_decls": [
          "ex_dvd_a_add_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:ex_dvd_a_add_b} \\lean{ex_dvd_a_add_b} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_a_add_eta_sq_mul_b",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_dvd_a_add_eta_sq_mul_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_a_add_eta_sq_mul_b} \\lean{Solution.lambda_dvd_a_add_eta_sq_mul_b} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_w",
        "node_deps": [
          "def:Solution"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_w"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_w} \\lean{Solution.lambda_not_dvd_w} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:formula1",
        "node_deps": [
          "def:Solution",
          "lmm:toInteger_cube_eq_one",
          "lmm:toInteger_eval_cyclo"
        ],
        "node_lean_decls": [
          "Solution.formula1"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:formula1} \\lean{Solution.formula1} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:univ_quot",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.univ_quot"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:univ_quot} \\lean{IsCyclotomicExtension.Rat.Three.univ_quot} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "thm:fermatLastTheoremThree_of_three_dvd_only_c",
        "node_deps": [],
        "node_lean_decls": [
          "fermatLastTheoremThree_of_three_dvd_only_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{thm:fermatLastTheoremThree_of_three_dvd_only_c} \\lean{fermatLastTheoremThree_of_three_dvd_only_c} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove that \n\n\\[ \\forall a, b, c \\in \\mathbb {Z}, \\text{ if } c \\neq 0 \\text{ and } 3 \\nmid a \\text{ and } 3 \\nmid b \\text{ and } 3 \\mid c \\text{ and } \\gcd (a,b)=1, \\text{ then } a^3 + b^3 \\neq c^3. \\]\n\n\\end{thmenv}",
        "node_caption": "Theorem",
        "node_caption_name": "Theorem",
        "node_tag_name": "theorem",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove that \u2200a, b, c Z,  if  c \u22600  and  3 a  and  3 b  and  3 \u2223c  and  (a,b)=1,  then  a3 + b3 \u2260c3.",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_sq_not_a_add_eta_mul_b"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_y} \\lean{Solution.lambda_not_dvd_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_dvd_X",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.lambda_not_dvd_X"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_dvd_X} \\lean{Solution.lambda_not_dvd_X} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_not_unit",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_not_unit"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_not_unit} \\lean{IsCyclotomicExtension.Rat.Three.lambda_not_unit} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:dvd_or_dvd_sub_one_or_dvd_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:dvd_or_dvd_sub_one_or_dvd_add_one} \\lean{IsCyclotomicExtension.Rat.Three.dvd_or_dvd_sub_one_or_dvd_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\lean{IsCyclotomicExtension.Rat.Three.lambda_dvd_mul_sub_one_mul_sub_eta_add_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.multiplicity_lambda_c_finite",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_not_unit"
        ],
        "node_lean_decls": [
          "Solution'.multiplicity_lambda_c_finite"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.multiplicity_lambda_c_finite} \\lean{Solution'.multiplicity_lambda_c_finite} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_x_y",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_y",
          "lmm:associated_of_dvd_a_add_b_of_dvd_a_add_eta_mul_b",
          "lmm:lambda_not_dvd_x"
        ],
        "node_lean_decls": [
          "Solution.coprime_x_y"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_x_y} \\lean{Solution.coprime_x_y} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity_lt",
        "node_deps": [
          "def:Solution",
          "def:Solution1_final",
          "lmm:Solution1_final_multiplicity"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity_lt"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity_lt} \\lean{Solution'_final_multiplicity_lt} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:x_eq_unit_mul_cube",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
          "lmm:coprime_x_y",
          "lmm:coprime_x_z"
        ],
        "node_lean_decls": [
          "Solution.x_eq_unit_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:x_eq_unit_mul_cube} \\lean{Solution.x_eq_unit_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1_final_multiplicity",
        "node_deps": [
          "def:Solution",
          "def:Solution1_final",
          "lmm:lambda_ne_zero"
        ],
        "node_lean_decls": [
          "Solution'_final_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1_final_multiplicity} \\lean{Solution'_final_multiplicity} \\leanok \\uses{def:Solution, def:Solution1_final} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_a_of_dvd_b",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_a_of_dvd_b"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_a_of_dvd_b} \\lean{three_dvd_gcd_of_dvd_a_of_dvd_b} \\leanok \\\\ Let $a, b, c \\in \\mathbb {N}$. \\\\ Let $3 \\mid a$ and $3 \\mid b$. \\\\ Let $a ^3 + b ^3 = c ^3$. \\\\ \\\\ Then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. Let 3 \u2223a and 3 \u2223b. Let a 3 + b 3 = c 3. Then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:three_dvd_gcd_of_dvd_b_of_dvd_c",
        "node_deps": [],
        "node_lean_decls": [
          "three_dvd_gcd_of_dvd_b_of_dvd_c"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:three_dvd_gcd_of_dvd_b_of_dvd_c} \\lean{three_dvd_gcd_of_dvd_b_of_dvd_c} \\leanok Let $a, b, c \\in \\mathbb {N}$. \\\\ If $3 \\mid b$ and $3 \\mid c$ and $a ^3 + b ^3 = c ^3$, then $3 \\mid \\gcd (\\left\\{ a, b, c\\right\\} )$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  Let a, b, c N. If 3 \u2223b and 3 \u2223c and a 3 + b 3 = c 3, then 3 \u2223(a, b, c). ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:z_eq_unit_mul_cube",
        "node_deps": [
          "def:Solution",
          "lmm:x_mul_y_mul_z_eq_u_w_pow_three",
          "lmm:coprime_x_z",
          "lmm:coprime_y_z"
        ],
        "node_lean_decls": [
          "Solution.z_eq_unit_mul_cube"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:z_eq_unit_mul_cube} \\lean{Solution.z_eq_unit_mul_cube} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:coprime_y_z",
        "node_deps": [
          "def:Solution",
          "lmm:lambda_not_dvd_z",
          "lmm:associated_of_dvd_a_add_eta_mul_b_of_dvd_a_add_eta_sq__mul_b",
          "lmm:lambda_not_dvd_y"
        ],
        "node_lean_decls": [
          "Solution.coprime_y_z"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:coprime_y_z} \\lean{Solution.coprime_y_z} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen",
        "node_deps": [],
        "node_lean_decls": [
          "FermatLastTheoremForThree_of_FermatLastTheoremThreeGen"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\lean{FermatLastTheoremForThree_of_FermatLastTheoremThreeGen} \\leanok To prove Fermat\u2019s Last Theorem for exponent $3$, it suffices to prove \\ref{thm:fermatLastTheoremForThreeGen}. \\\\ \\\\ Equivalently, \\ref{thm:fermatLastTheoremForThreeGen} implies Fermat\u2019s Last Theorem for exponent $3$. \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  To prove Fermat\u2019s Last Theorem for exponent 3, it suffices to prove . Equivalently,  implies Fermat\u2019s Last Theorem for exponent 3. ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:two_ne_zero",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.two_ne_zero"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:two_ne_zero} \\lean{IsCyclotomicExtension.Rat.Three.two_ne_zero} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution.two_le_multiplicity",
        "node_deps": [
          "def:Solution",
          "lmm:Solution1.two_le_multiplicity"
        ],
        "node_lean_decls": [
          "Solution.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution.two_le_multiplicity} \\lean{Solution.two_le_multiplicity} \\leanok \\uses{def:Solution} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:lambda_sq_div_lambda_fourth",
        "node_deps": [],
        "node_lean_decls": [
          "Solution.lambda_sq_div_lambda_fourth"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:lambda_sq_div_lambda_fourth} \\lean{Solution.lambda_sq_div_lambda_fourth} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "lmm:cube_sub_one",
        "node_deps": [],
        "node_lean_decls": [
          "IsCyclotomicExtension.Rat.Three.cube_sub_one"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:cube_sub_one} \\lean{IsCyclotomicExtension.Rat.Three.cube_sub_one} \\leanok \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "  ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      },
      {
        "id": "def:Solution1_final",
        "node_deps": [
          "def:Solution1",
          "lmm:final"
        ],
        "node_lean_decls": [
          "Solution'_final"
        ],
        "node_name": "thmenv",
        "node_title": "Final Solution\u2019",
        "node_source": "\\begin{thmenv}[Final Solution'] \\label{def:Solution1_final} \\lean{Solution'_final} \\leanok \\uses{def:Solution1, lmm:two_le_multiplicity, lmm:final} \n\n\\end{thmenv}",
        "node_caption": "Definition",
        "node_caption_name": "Theorem",
        "node_tag_name": "definition",
        "node_full_title": "79 Final Solution\u2019",
        "node_text_content": "    ",
        "node_can_state": true,
        "node_can_prove": false,
        "node_proved": false,
        "node_fully_proved": true
      },
      {
        "id": "lmm:Solution1.two_le_multiplicity",
        "node_deps": [
          "def:Solution1",
          "lmm:lambda_pow_two_dvd_c"
        ],
        "node_lean_decls": [
          "Solution'.two_le_multiplicity"
        ],
        "node_name": "thmenv",
        "node_title": "",
        "node_source": "\\begin{thmenv} \\label{lmm:Solution1.two_le_multiplicity} \\lean{Solution'.two_le_multiplicity} \\leanok \\uses{def:Solution1} \n\n\\end{thmenv}",
        "node_caption": "Lemma",
        "node_caption_name": "Theorem",
        "node_tag_name": "lemma",
        "node_full_title": "",
        "node_text_content": "   ",
        "node_can_state": true,
        "node_can_prove": true,
        "node_proved": true,
        "node_fully_proved": true
      }
    ]
  },
  "b0bcda31d015a7184abfc6db87202da0cf4d8809": {
    "date": "2024-04-13T21:41:52",
    "graph": []
  }
}